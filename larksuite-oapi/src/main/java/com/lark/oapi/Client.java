//  code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi;

import com.lark.oapi.core.Config;
import com.lark.oapi.core.Transport;
import com.lark.oapi.core.cache.ICache;
import com.lark.oapi.core.cache.LocalCache;
import com.lark.oapi.core.enums.AppType;
import com.lark.oapi.core.enums.BaseUrlEnum;
import com.lark.oapi.core.httpclient.IHttpTransport;
import com.lark.oapi.core.httpclient.OkHttpTransport;
import com.lark.oapi.core.request.RequestOptions;
import com.lark.oapi.core.response.RawResponse;
import com.lark.oapi.core.token.*;
import com.lark.oapi.core.utils.OKHttps;
import com.lark.oapi.core.utils.Sets;
import com.lark.oapi.core.utils.Strings;
import com.lark.oapi.service.acs.AcsService;
import com.lark.oapi.service.admin.AdminService;
import com.lark.oapi.service.application.ApplicationService;
import com.lark.oapi.service.approval.ApprovalService;
import com.lark.oapi.service.attendance.AttendanceService;
import com.lark.oapi.service.auth.AuthService;
import com.lark.oapi.service.authen.AuthenService;
import com.lark.oapi.service.baike.BaikeService;
import com.lark.oapi.service.bitable.BitableService;
import com.lark.oapi.service.block.BlockService;
import com.lark.oapi.service.calendar.CalendarService;
import com.lark.oapi.service.contact.ContactService;
import com.lark.oapi.service.corehr.CorehrService;
import com.lark.oapi.service.document_ai.DocumentAiService;
import com.lark.oapi.service.docx.DocxService;
import com.lark.oapi.service.drive.DriveService;
import com.lark.oapi.service.ehr.EhrService;
import com.lark.oapi.service.event.EventService;
import com.lark.oapi.service.ext.ExtService;
import com.lark.oapi.service.gray_test_open_sg.GrayTestOpenSgService;
import com.lark.oapi.service.helpdesk.HelpdeskService;
import com.lark.oapi.service.hire.HireService;
import com.lark.oapi.service.human_authentication.HumanAuthenticationService;
import com.lark.oapi.service.im.ImService;
import com.lark.oapi.service.lingo.LingoService;
import com.lark.oapi.service.mail.MailService;
import com.lark.oapi.service.mdm.MdmService;
import com.lark.oapi.service.meeting_room.MeetingRoomService;
import com.lark.oapi.service.okr.OkrService;
import com.lark.oapi.service.optical_char_recognition.OpticalCharRecognitionService;
import com.lark.oapi.service.passport.PassportService;
import com.lark.oapi.service.personal_settings.PersonalSettingsService;
import com.lark.oapi.service.search.SearchService;
import com.lark.oapi.service.security_and_compliance.SecurityAndComplianceService;
import com.lark.oapi.service.sheets.SheetsService;
import com.lark.oapi.service.speech_to_text.SpeechToTextService;
import com.lark.oapi.service.task.TaskService;
import com.lark.oapi.service.tenant.TenantService;
import com.lark.oapi.service.translation.TranslationService;
import com.lark.oapi.service.vc.VcService;
import com.lark.oapi.service.wiki.WikiService;
import com.lark.oapi.service.workplace.WorkplaceService;

import java.nio.charset.StandardCharsets;
import java.util.concurrent.TimeUnit;


public class Client {
    private Config config;
    private ApplicationService application;
    private LingoService lingo;
    private PersonalSettingsService personalSettings;
    private SearchService search;
    private WikiService wiki;
    private AttendanceService attendance;
    private BaikeService baike;
    private DocumentAiService documentAi;
    private ImService im;
    private WorkplaceService workplace;
    private AuthenService authen;
    private DriveService drive;
    private HireService hire;
    private EhrService ehr;
    private HelpdeskService helpdesk;
    private MdmService mdm;
    private SecurityAndComplianceService securityAndCompliance;
    private SheetsService sheets;
    private BlockService block;
    private ContactService contact;
    private CorehrService corehr;
    private SpeechToTextService speechToText;
    private MeetingRoomService meetingRoom;
    private TenantService tenant;
    private TranslationService translation;
    private AdminService admin;
    private CalendarService calendar;
    private MailService mail;
    private PassportService passport;
    private AcsService acs;
    private ApprovalService approval;
    private HumanAuthenticationService humanAuthentication;
    private OkrService okr;
    private VcService vc;
    private AuthService auth;
    private DocxService docx;
    private GrayTestOpenSgService grayTestOpenSg;
    private TaskService task;
    private BitableService bitable;
    private EventService event;
    private OpticalCharRecognitionService opticalCharRecognition;

    private ExtService extService;

    public static Builder newBuilder(String appId, String appSecret) {
        return new Builder(appId, appSecret);
    }

    public ExtService ext() {
        return extService;
    }

    public void setConfig(Config config) {
        this.config = config;
    }

    public ApplicationService application() {
        return application;
    }

    public LingoService lingo() {
        return lingo;
    }

    public PersonalSettingsService personalSettings() {
        return personalSettings;
    }

    public SearchService search() {
        return search;
    }

    public WikiService wiki() {
        return wiki;
    }

    public AttendanceService attendance() {
        return attendance;
    }

    public BaikeService baike() {
        return baike;
    }

    public DocumentAiService documentAi() {
        return documentAi;
    }

    public ImService im() {
        return im;
    }

    public WorkplaceService workplace() {
        return workplace;
    }

    public AuthenService authen() {
        return authen;
    }

    public DriveService drive() {
        return drive;
    }

    public HireService hire() {
        return hire;
    }

    public EhrService ehr() {
        return ehr;
    }

    public HelpdeskService helpdesk() {
        return helpdesk;
    }

    public MdmService mdm() {
        return mdm;
    }

    public SecurityAndComplianceService securityAndCompliance() {
        return securityAndCompliance;
    }

    public SheetsService sheets() {
        return sheets;
    }

    public BlockService block() {
        return block;
    }

    public ContactService contact() {
        return contact;
    }

    public CorehrService corehr() {
        return corehr;
    }

    public SpeechToTextService speechToText() {
        return speechToText;
    }

    public MeetingRoomService meetingRoom() {
        return meetingRoom;
    }

    public TenantService tenant() {
        return tenant;
    }

    public TranslationService translation() {
        return translation;
    }

    public AdminService admin() {
        return admin;
    }

    public CalendarService calendar() {
        return calendar;
    }

    public MailService mail() {
        return mail;
    }

    public PassportService passport() {
        return passport;
    }

    public AcsService acs() {
        return acs;
    }

    public ApprovalService approval() {
        return approval;
    }

    public HumanAuthenticationService humanAuthentication() {
        return humanAuthentication;
    }

    public OkrService okr() {
        return okr;
    }

    public VcService vc() {
        return vc;
    }

    public AuthService auth() {
        return auth;
    }

    public DocxService docx() {
        return docx;
    }

    public GrayTestOpenSgService grayTestOpenSg() {
        return grayTestOpenSg;
    }

    public TaskService task() {
        return task;
    }

    public BitableService bitable() {
        return bitable;
    }

    public EventService event() {
        return event;
    }

    public OpticalCharRecognitionService opticalCharRecognition() {
        return opticalCharRecognition;
    }

    public RawResponse post(String httpPath
            , Object body
            , AccessTokenType accessTokenType
            , RequestOptions requestOptions) throws Exception {
        return Transport.send(config, requestOptions, "POST", httpPath, Sets.newHashSet(accessTokenType), body);
    }

    public RawResponse post(String httpPath
            , Object body
            , AccessTokenType accessTokenType
    ) throws Exception {
        return Transport.send(config, null, "POST", httpPath, Sets.newHashSet(accessTokenType), body);
    }

    public RawResponse get(String httpPath
            , Object body
            , AccessTokenType accessTokenType
            , RequestOptions requestOptions) throws Exception {
        return Transport.send(config, requestOptions, "GET", httpPath, Sets.newHashSet(accessTokenType), body);
    }

    public RawResponse get(String httpPath
            , Object body
            , AccessTokenType accessTokenType) throws Exception {
        return Transport.send(config, null, "GET", httpPath, Sets.newHashSet(accessTokenType), body);
    }

    public RawResponse delete(String httpPath
            , Object body
            , AccessTokenType accessTokenType
            , RequestOptions requestOptions) throws Exception {
        return Transport.send(config, requestOptions, "DELETE", httpPath, Sets.newHashSet(accessTokenType), body);
    }

    public RawResponse delete(String httpPath
            , Object body
            , AccessTokenType accessTokenType) throws Exception {
        return Transport.send(config, null, "DELETE", httpPath, Sets.newHashSet(accessTokenType), body);
    }

    public RawResponse put(String httpPath
            , Object body
            , AccessTokenType accessTokenType
            , RequestOptions requestOptions) throws Exception {
        return Transport.send(config, requestOptions, "PUT", httpPath, Sets.newHashSet(accessTokenType), body);
    }

    public RawResponse put(String httpPath
            , Object body
            , AccessTokenType accessTokenType) throws Exception {
        return Transport.send(config, null, "PUT", httpPath, Sets.newHashSet(accessTokenType), body);
    }

    public RawResponse patch(String httpPath
            , Object body
            , AccessTokenType accessTokenType
            , RequestOptions requestOptions) throws Exception {
        return Transport.send(config, requestOptions, "PATCH", httpPath, Sets.newHashSet(accessTokenType), body);
    }

    public RawResponse patch(String httpPath
            , Object body
            , AccessTokenType accessTokenType) throws Exception {
        return Transport.send(config, null, "PATCH", httpPath, Sets.newHashSet(accessTokenType), body);
    }

    public RawResponse options(String httpPath
            , Object body
            , AccessTokenType accessTokenType
            , RequestOptions requestOptions) throws Exception {
        return Transport.send(config, requestOptions, "OPTIONS", httpPath, Sets.newHashSet(accessTokenType), body);
    }

    public RawResponse options(String httpPath
            , Object body, AccessTokenType accessTokenType) throws Exception {
        return Transport.send(config, null, "OPTIONS", httpPath, Sets.newHashSet(accessTokenType), body);
    }

    public static final class Builder {
        private Config config = new Config();

        public Builder(String appId, String appSecret) {
            config.setAppId(appId);
            config.setAppSecret(appSecret);
            config.setBaseUrl(BaseUrlEnum.FeiShu.getUrl());
            config.setAppType(AppType.SELF_BUILT);
            config.setDisableTokenCache(false);
        }

        public Builder helpDeskCredential(String helpDeskId, String helpDeskToken) {
            config.setHelpDeskToken(helpDeskToken);
            config.setHelpDeskID(helpDeskId);
            if (Strings.isNotEmpty(helpDeskId) && Strings.isNotEmpty(helpDeskToken)) {
                config.setHelpDeskAuthToken(java.util.Base64.getEncoder().encodeToString(String.format("%s:%s", helpDeskId, helpDeskToken).getBytes(StandardCharsets.UTF_8)));
            }
            return this;
        }

        public Builder appType(AppType appType) {
            config.setAppType(appType);
            return this;
        }

        public Builder marketplaceApp() {
            config.setAppType(AppType.MARKETPLACE);
            return this;
        }

        public Builder disableTokenCache() {
            config.setDisableTokenCache(true);
            return this;
        }

        public Builder logReqAtDebug(boolean logReqRespInfoAtDebugLevel) {
            config.setLogReqAtDebug(logReqRespInfoAtDebugLevel);
            return this;
        }

        public Builder openBaseUrl(String baseUrl) {
            config.setBaseUrl(baseUrl);
            return this;
        }

        public Builder openBaseUrl(BaseUrlEnum baseUrl) {
            config.setBaseUrl(baseUrl.getUrl());
            return this;
        }

        public Builder tokenCache(ICache cache) {
            config.setCache(cache);
            return this;
        }

        public Builder requestTimeout(long timeout, TimeUnit timeUnit) {
            config.setRequestTimeOut(timeout);
            config.setTimeOutTimeUnit(timeUnit);
            return this;
        }

        public Builder httpTransport(IHttpTransport httpTransport) {
            config.setHttpTransport(httpTransport);
            return this;
        }

        private void initCache(Config config) {
            if (config.getCache() != null) {
                GlobalAppTicketManager.setAppTicketManager(new AppTicketManager(config.getCache()));
                GlobalTokenManager.setTokenManager(new TokenManager(config.getCache()));
            } else {
                ICache cache = LocalCache.getInstance();
                GlobalAppTicketManager.setAppTicketManager(new AppTicketManager(cache));
                GlobalTokenManager.setTokenManager(new TokenManager(cache));
            }
        }

        private void initHttpTransport(Config config) {
            if (config.getHttpTransport() == null) {
                if (config.getRequestTimeOut() > 0) {
                    config.setHttpTransport(new OkHttpTransport(OKHttps.create(config.getRequestTimeOut(), config.getTimeOutTimeUnit())));
                } else {
                    config.setHttpTransport(new OkHttpTransport(OKHttps.defaultClient));
                }
            }
        }

        public Client build() {
            Client client = new Client();
            client.setConfig(config);
            initCache(config);
            initHttpTransport(config);
            client.extService = new ExtService(config);
            client.application = new ApplicationService(config);
            client.lingo = new LingoService(config);
            client.personalSettings = new PersonalSettingsService(config);
            client.search = new SearchService(config);
            client.wiki = new WikiService(config);
            client.attendance = new AttendanceService(config);
            client.baike = new BaikeService(config);
            client.documentAi = new DocumentAiService(config);
            client.im = new ImService(config);
            client.workplace = new WorkplaceService(config);
            client.authen = new AuthenService(config);
            client.drive = new DriveService(config);
            client.hire = new HireService(config);
            client.ehr = new EhrService(config);
            client.helpdesk = new HelpdeskService(config);
            client.mdm = new MdmService(config);
            client.securityAndCompliance = new SecurityAndComplianceService(config);
            client.sheets = new SheetsService(config);
            client.block = new BlockService(config);
            client.contact = new ContactService(config);
            client.corehr = new CorehrService(config);
            client.speechToText = new SpeechToTextService(config);
            client.meetingRoom = new MeetingRoomService(config);
            client.tenant = new TenantService(config);
            client.translation = new TranslationService(config);
            client.admin = new AdminService(config);
            client.calendar = new CalendarService(config);
            client.mail = new MailService(config);
            client.passport = new PassportService(config);
            client.acs = new AcsService(config);
            client.approval = new ApprovalService(config);
            client.humanAuthentication = new HumanAuthenticationService(config);
            client.okr = new OkrService(config);
            client.vc = new VcService(config);
            client.auth = new AuthService(config);
            client.docx = new DocxService(config);
            client.grayTestOpenSg = new GrayTestOpenSgService(config);
            client.task = new TaskService(config);
            client.bitable = new BitableService(config);
            client.event = new EventService(config);
            client.opticalCharRecognition = new OpticalCharRecognitionService(config);

            return client;
        }
    }
}


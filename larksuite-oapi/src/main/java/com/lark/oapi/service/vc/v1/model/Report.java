// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.vc.v1.model;

import com.google.gson.annotations.SerializedName;

public class Report {
    /**
     * 总会议数量
     * <p> 示例值：100
     */
    @SerializedName("total_meeting_count")
    private String totalMeetingCount;
    /**
     * 总会议时长（单位sec）
     * <p> 示例值：300000
     */
    @SerializedName("total_meeting_duration")
    private String totalMeetingDuration;
    /**
     * 总参会人数
     * <p> 示例值：20000
     */
    @SerializedName("total_participant_count")
    private String totalParticipantCount;
    /**
     * 每日会议报告列表
     * <p> 示例值：
     */
    @SerializedName("daily_report")
    private ReportMeetingDaily[] dailyReport;

    // builder 开始
    public Report() {
    }

    public Report(Builder builder) {
        /**
         * 总会议数量
         * <p> 示例值：100
         */
        this.totalMeetingCount = builder.totalMeetingCount;
        /**
         * 总会议时长（单位sec）
         * <p> 示例值：300000
         */
        this.totalMeetingDuration = builder.totalMeetingDuration;
        /**
         * 总参会人数
         * <p> 示例值：20000
         */
        this.totalParticipantCount = builder.totalParticipantCount;
        /**
         * 每日会议报告列表
         * <p> 示例值：
         */
        this.dailyReport = builder.dailyReport;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getTotalMeetingCount() {
        return this.totalMeetingCount;
    }

    public void setTotalMeetingCount(String totalMeetingCount) {
        this.totalMeetingCount = totalMeetingCount;
    }

    public String getTotalMeetingDuration() {
        return this.totalMeetingDuration;
    }

    public void setTotalMeetingDuration(String totalMeetingDuration) {
        this.totalMeetingDuration = totalMeetingDuration;
    }

    public String getTotalParticipantCount() {
        return this.totalParticipantCount;
    }

    public void setTotalParticipantCount(String totalParticipantCount) {
        this.totalParticipantCount = totalParticipantCount;
    }

    public ReportMeetingDaily[] getDailyReport() {
        return this.dailyReport;
    }

    public void setDailyReport(ReportMeetingDaily[] dailyReport) {
        this.dailyReport = dailyReport;
    }

    public static class Builder {
        /**
         * 总会议数量
         * <p> 示例值：100
         */
        private String totalMeetingCount;
        /**
         * 总会议时长（单位sec）
         * <p> 示例值：300000
         */
        private String totalMeetingDuration;
        /**
         * 总参会人数
         * <p> 示例值：20000
         */
        private String totalParticipantCount;
        /**
         * 每日会议报告列表
         * <p> 示例值：
         */
        private ReportMeetingDaily[] dailyReport;

        /**
         * 总会议数量
         * <p> 示例值：100
         *
         * @param totalMeetingCount
         * @return
         */
        public Builder totalMeetingCount(String totalMeetingCount) {
            this.totalMeetingCount = totalMeetingCount;
            return this;
        }


        /**
         * 总会议时长（单位sec）
         * <p> 示例值：300000
         *
         * @param totalMeetingDuration
         * @return
         */
        public Builder totalMeetingDuration(String totalMeetingDuration) {
            this.totalMeetingDuration = totalMeetingDuration;
            return this;
        }


        /**
         * 总参会人数
         * <p> 示例值：20000
         *
         * @param totalParticipantCount
         * @return
         */
        public Builder totalParticipantCount(String totalParticipantCount) {
            this.totalParticipantCount = totalParticipantCount;
            return this;
        }


        /**
         * 每日会议报告列表
         * <p> 示例值：
         *
         * @param dailyReport
         * @return
         */
        public Builder dailyReport(ReportMeetingDaily[] dailyReport) {
            this.dailyReport = dailyReport;
            return this;
        }


        public Report build() {
            return new Report(this);
        }
    }
}

// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.application.v6.model;

import com.google.gson.annotations.SerializedName;

public class AppConfigVisibility {
    /**
     * 是否全员可见,false:否;true:是;不填:继续当前状态不改变.如果可见范围为全员后添加的可用人员则无效,禁用人员仍然有效
     * <p> 示例值：false
     */
    @SerializedName("is_visible_to_all")
    private Boolean isVisibleToAll;
    /**
     * 可用人员列表
     * <p> 示例值：
     */
    @SerializedName("visible_list")
    private AppVisibilityIdList visibleList;

    // builder 开始
    public AppConfigVisibility() {
    }

    public AppConfigVisibility(Builder builder) {
        /**
         * 是否全员可见,false:否;true:是;不填:继续当前状态不改变.如果可见范围为全员后添加的可用人员则无效,禁用人员仍然有效
         * <p> 示例值：false
         */
        this.isVisibleToAll = builder.isVisibleToAll;
        /**
         * 可用人员列表
         * <p> 示例值：
         */
        this.visibleList = builder.visibleList;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public Boolean getIsVisibleToAll() {
        return this.isVisibleToAll;
    }

    public void setIsVisibleToAll(Boolean isVisibleToAll) {
        this.isVisibleToAll = isVisibleToAll;
    }

    public AppVisibilityIdList getVisibleList() {
        return this.visibleList;
    }

    public void setVisibleList(AppVisibilityIdList visibleList) {
        this.visibleList = visibleList;
    }

    public static class Builder {
        /**
         * 是否全员可见,false:否;true:是;不填:继续当前状态不改变.如果可见范围为全员后添加的可用人员则无效,禁用人员仍然有效
         * <p> 示例值：false
         */
        private Boolean isVisibleToAll;
        /**
         * 可用人员列表
         * <p> 示例值：
         */
        private AppVisibilityIdList visibleList;

        /**
         * 是否全员可见,false:否;true:是;不填:继续当前状态不改变.如果可见范围为全员后添加的可用人员则无效,禁用人员仍然有效
         * <p> 示例值：false
         *
         * @param isVisibleToAll
         * @return
         */
        public Builder isVisibleToAll(Boolean isVisibleToAll) {
            this.isVisibleToAll = isVisibleToAll;
            return this;
        }


        /**
         * 可用人员列表
         * <p> 示例值：
         *
         * @param visibleList
         * @return
         */
        public Builder visibleList(AppVisibilityIdList visibleList) {
            this.visibleList = visibleList;
            return this;
        }


        public AppConfigVisibility build() {
            return new AppConfigVisibility(this);
        }
    }
}

// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.contact.v3.model;

import com.google.gson.annotations.SerializedName;

public class FunctionalRoleMember {
    /**
     * 成员ID
     * <p> 示例值：od-4e6ac4d14bcd5071a37a39de902c7141
     */
    @SerializedName("user_id")
    private String userId;
    /**
     * 管理范围的类型
     * <p> 示例值：All
     */
    @SerializedName("scope_type")
    private String scopeType;
    /**
     * 表示该角色成员的管理范围，scope_type为“指定范围”时，返回该值
     * <p> 示例值：
     */
    @SerializedName("department_ids")
    private String[] departmentIds;

    // builder 开始
    public FunctionalRoleMember() {
    }

    public FunctionalRoleMember(Builder builder) {
        /**
         * 成员ID
         * <p> 示例值：od-4e6ac4d14bcd5071a37a39de902c7141
         */
        this.userId = builder.userId;
        /**
         * 管理范围的类型
         * <p> 示例值：All
         */
        this.scopeType = builder.scopeType;
        /**
         * 表示该角色成员的管理范围，scope_type为“指定范围”时，返回该值
         * <p> 示例值：
         */
        this.departmentIds = builder.departmentIds;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getUserId() {
        return this.userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getScopeType() {
        return this.scopeType;
    }

    public void setScopeType(String scopeType) {
        this.scopeType = scopeType;
    }

    public String[] getDepartmentIds() {
        return this.departmentIds;
    }

    public void setDepartmentIds(String[] departmentIds) {
        this.departmentIds = departmentIds;
    }

    public static class Builder {
        /**
         * 成员ID
         * <p> 示例值：od-4e6ac4d14bcd5071a37a39de902c7141
         */
        private String userId;
        /**
         * 管理范围的类型
         * <p> 示例值：All
         */
        private String scopeType;
        /**
         * 表示该角色成员的管理范围，scope_type为“指定范围”时，返回该值
         * <p> 示例值：
         */
        private String[] departmentIds;

        /**
         * 成员ID
         * <p> 示例值：od-4e6ac4d14bcd5071a37a39de902c7141
         *
         * @param userId
         * @return
         */
        public Builder userId(String userId) {
            this.userId = userId;
            return this;
        }


        /**
         * 管理范围的类型
         * <p> 示例值：All
         *
         * @param scopeType
         * @return
         */
        public Builder scopeType(String scopeType) {
            this.scopeType = scopeType;
            return this;
        }

        /**
         * 管理范围的类型
         * <p> 示例值：All
         *
         * @param scopeType {@link com.lark.oapi.service.contact.v3.enums.FunctionalRoleMemberFunctionalRoleMemberScopeTypeEnum}
         * @return
         */
        public Builder scopeType(com.lark.oapi.service.contact.v3.enums.FunctionalRoleMemberFunctionalRoleMemberScopeTypeEnum scopeType) {
            this.scopeType = scopeType.getValue();
            return this;
        }


        /**
         * 表示该角色成员的管理范围，scope_type为“指定范围”时，返回该值
         * <p> 示例值：
         *
         * @param departmentIds
         * @return
         */
        public Builder departmentIds(String[] departmentIds) {
            this.departmentIds = departmentIds;
            return this;
        }


        public FunctionalRoleMember build() {
            return new FunctionalRoleMember(this);
        }
    }
}

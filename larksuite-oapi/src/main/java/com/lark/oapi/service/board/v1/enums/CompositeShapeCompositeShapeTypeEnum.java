// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.board.v1.enums;

/**
 * 基础图形的具体类型
 */
public enum CompositeShapeCompositeShapeTypeEnum {
    ROUNDRECT2("round_rect2"), // 全圆角矩形
    ELLIPSE("ellipse"), // 圆形
    HEXAGON("hexagon"), // 六边形
    CYLINDER("cylinder"), // 圆柱体
    PARALLELOGRAM("parallelogram"), // 平行四边形
    TRAPEZOID("trapezoid"), // 梯形
    TRIANGLE("triangle"), // 三角形
    ROUNDRECT("round_rect"), // 圆角矩形
    STEP("step"), // 步骤
    DIAMOND("diamond"), // 菱形
    RECT("rect"), // 基础矩形
    STAR("star"), // 五角星
    BUBBLE("bubble"), // 气泡
    PENTAGON("pentagon"), // 五边形
    FORWARDARROW("forward_arrow"), // 单向箭头
    DOCUMENTSHAPE("document_shape"), // 文档图形
    CONDITIONSHAPE("condition_shape"), // 组合片段
    CLOUD("cloud"), // 云朵
    CROSS("cross"), // 十字形
    STEP2("step2"), // 步骤图形2
    PREDEFINEDPROCESS("predefined_process"), // 预定义流程
    DELAYSHAPE("delay_shape"), // 延迟图形
    OFFPAGECONNECTOR("off_page_connector"), // 跨页引用
    NOTESHAPE("note_shape"), // 注释图形
    DATAPROCESS("data_process"), // 数据处理
    DATASTORE("data_store"), // 数据存储
    DATASTORE2("data_store2"), // 数据存储2
    DATASTORE3("data_store3"), // 数据存储3
    STAR2("star2"), // 爆炸星型
    STAR3("star3"), // 四角形
    STAR4("star4"), // 六角形
    ACTOR("actor"), // 角色小人
    BRACE("brace"), // 花括号
    CONDITIONSHAPE2("condition_shape2"), // 组合片段2
    DOUBLEARROW("double_arrow"), // 双向箭头
    DATAFLOWROUNDRECT3("data_flow_round_rect3"), // 数据处理（正方圆角矩形）
    RECTBUBBLE("rect_bubble"), // 矩形气泡
    MANUALINPUT("manual_input"), // 手动输入图形
    FLOWCHARTROUNDRECT("flow_chart_round_rect"), // 流程图圆角矩形
    FLOWCHARTROUNDRECT2("flow_chart_round_rect2"), // 流程图全圆角矩形
    FLOWCHARTDIAMOND("flow_chart_diamond"), // 流程图判定
    FLOWCHARTPARALLELOGRAM("flow_chart_parallelogram"), // 流程图数据
    FLOWCHARTCYLINDER("flow_chart_cylinder"), // 流程图数据库
    FLOWCHARTTRAPEZOID("flow_chart_trapezoid"), // 流程图手动操作
    FLOWCHARTHEXAGON("flow_chart_hexagon"), // 流程图准备
    DATAFLOWROUNDRECT("data_flow_round_rect"), // 数据流外部实体
    DATAFLOWELLIPSE("data_flow_ellipse"), // 数据流数据处理
    BACKWARDARROW("backward_arrow"), // 反向箭头（左箭头）
    BRACEREVERSE("brace_reverse"), // 反向花括号（左括号）
    FLOWCHARTMQ("flow_chart_mq"), // 消息队列
    HORIZCYLINDER("horiz_cylinder"), // 水平方向圆柱体
    CLASSINTERFACE("class_interface"), // 类图，接口
    CLASSIFIER("classifier"), // 类图，类目
    CIRCULARRING("circular_ring"), // 圆环
    PIE("pie"), // 扇形
    RIGHTTRIANGLE("right_triangle"), // 直角三角形
    OCTAGON("octagon"), // 八边形
    STATESTART("state_start"), // 状态图，开始
    STATEEND("state_end"), // 状态图，结束
    STATECONCURRENCE("state_concurrence"), // 状态图，并发
    COMPONENTSHAPE("component_shape"), // 组件
    COMPONENTSHAPE2("component_shape2"), // 组件2
    COMPONENTINTERFACE("component_interface"), // 组件，接口
    COMPONENTREQUIREDINTERFACE("component_required_interface"), // 组件，需求接口
    COMPONENTASSEMBLY("component_assembly"), // 组件，组装
    CUBE("cube"), // 立方体
    ;
    private String value;

    CompositeShapeCompositeShapeTypeEnum(String value) {
        this.value = value;
    }

    public String getValue() {
        return this.value;
    }
}
// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.sheets.v3.model;

import com.google.gson.annotations.SerializedName;

public class PatchConditionalFormat {
    /**
     * 条件格式应用范围
     * <p> 示例值：
     */
    @SerializedName("ranges")
    private ConditionalFormatRange[] ranges;
    /**
     * 条件格式规则
     * <p> 示例值：
     */
    @SerializedName("conditional_format_rule")
    private ConditionalFormatRule conditionalFormatRule;
    /**
     * 条件格式索引位置
     * <p> 示例值：0
     */
    @SerializedName("index")
    private Integer index;

    // builder 开始
    public PatchConditionalFormat() {
    }

    public PatchConditionalFormat(Builder builder) {
        /**
         * 条件格式应用范围
         * <p> 示例值：
         */
        this.ranges = builder.ranges;
        /**
         * 条件格式规则
         * <p> 示例值：
         */
        this.conditionalFormatRule = builder.conditionalFormatRule;
        /**
         * 条件格式索引位置
         * <p> 示例值：0
         */
        this.index = builder.index;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public ConditionalFormatRange[] getRanges() {
        return this.ranges;
    }

    public void setRanges(ConditionalFormatRange[] ranges) {
        this.ranges = ranges;
    }

    public ConditionalFormatRule getConditionalFormatRule() {
        return this.conditionalFormatRule;
    }

    public void setConditionalFormatRule(ConditionalFormatRule conditionalFormatRule) {
        this.conditionalFormatRule = conditionalFormatRule;
    }

    public Integer getIndex() {
        return this.index;
    }

    public void setIndex(Integer index) {
        this.index = index;
    }

    public static class Builder {
        /**
         * 条件格式应用范围
         * <p> 示例值：
         */
        private ConditionalFormatRange[] ranges;
        /**
         * 条件格式规则
         * <p> 示例值：
         */
        private ConditionalFormatRule conditionalFormatRule;
        /**
         * 条件格式索引位置
         * <p> 示例值：0
         */
        private Integer index;

        /**
         * 条件格式应用范围
         * <p> 示例值：
         *
         * @param ranges
         * @return
         */
        public Builder ranges(ConditionalFormatRange[] ranges) {
            this.ranges = ranges;
            return this;
        }


        /**
         * 条件格式规则
         * <p> 示例值：
         *
         * @param conditionalFormatRule
         * @return
         */
        public Builder conditionalFormatRule(ConditionalFormatRule conditionalFormatRule) {
            this.conditionalFormatRule = conditionalFormatRule;
            return this;
        }


        /**
         * 条件格式索引位置
         * <p> 示例值：0
         *
         * @param index
         * @return
         */
        public Builder index(Integer index) {
            this.index = index;
            return this;
        }


        public PatchConditionalFormat build() {
            return new PatchConditionalFormat(this);
        }
    }
}

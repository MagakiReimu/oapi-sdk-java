// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.bitable.v1.model;

import com.google.gson.annotations.SerializedName;

public class ChildrenFilter {
    /**
     * 条件逻辑连接词
     * <p> 示例值：and
     */
    @SerializedName("conjunction")
    private String conjunction;
    /**
     * 筛选条件集合
     * <p> 示例值：
     */
    @SerializedName("conditions")
    private Condition[] conditions;

    // builder 开始
    public ChildrenFilter() {
    }

    public ChildrenFilter(Builder builder) {
        /**
         * 条件逻辑连接词
         * <p> 示例值：and
         */
        this.conjunction = builder.conjunction;
        /**
         * 筛选条件集合
         * <p> 示例值：
         */
        this.conditions = builder.conditions;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getConjunction() {
        return this.conjunction;
    }

    public void setConjunction(String conjunction) {
        this.conjunction = conjunction;
    }

    public Condition[] getConditions() {
        return this.conditions;
    }

    public void setConditions(Condition[] conditions) {
        this.conditions = conditions;
    }

    public static class Builder {
        /**
         * 条件逻辑连接词
         * <p> 示例值：and
         */
        private String conjunction;
        /**
         * 筛选条件集合
         * <p> 示例值：
         */
        private Condition[] conditions;

        /**
         * 条件逻辑连接词
         * <p> 示例值：and
         *
         * @param conjunction
         * @return
         */
        public Builder conjunction(String conjunction) {
            this.conjunction = conjunction;
            return this;
        }

        /**
         * 条件逻辑连接词
         * <p> 示例值：and
         *
         * @param conjunction {@link com.lark.oapi.service.bitable.v1.enums.ChildrenFilterConjunctionEnum}
         * @return
         */
        public Builder conjunction(com.lark.oapi.service.bitable.v1.enums.ChildrenFilterConjunctionEnum conjunction) {
            this.conjunction = conjunction.getValue();
            return this;
        }


        /**
         * 筛选条件集合
         * <p> 示例值：
         *
         * @param conditions
         * @return
         */
        public Builder conditions(Condition[] conditions) {
            this.conditions = conditions;
            return this;
        }


        public ChildrenFilter build() {
            return new ChildrenFilter(this);
        }
    }
}

// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.calendar.v4.model;

import com.google.gson.annotations.SerializedName;

public class CardPresent {
    /**
     * 卡片json内容
     * <p> 示例值：无
     */
    @SerializedName("body")
    private String body;
    /**
     * 是否为交互卡片
     * <p> 示例值：true
     */
    @SerializedName("interactable")
    private Boolean interactable;
    /**
     * 卡片类型
     * <p> 示例值：14
     */
    @SerializedName("type")
    private String type;
    /**
     * 操作类型
     * <p> 示例值：UPDATE
     */
    @SerializedName("operation_type")
    private String operationType;
    /**
     * 业务定义的卡片回调信息
     * <p> 示例值：无
     */
    @SerializedName("callback_info")
    private String callbackInfo;

    // builder 开始
    public CardPresent() {
    }

    public CardPresent(Builder builder) {
        /**
         * 卡片json内容
         * <p> 示例值：无
         */
        this.body = builder.body;
        /**
         * 是否为交互卡片
         * <p> 示例值：true
         */
        this.interactable = builder.interactable;
        /**
         * 卡片类型
         * <p> 示例值：14
         */
        this.type = builder.type;
        /**
         * 操作类型
         * <p> 示例值：UPDATE
         */
        this.operationType = builder.operationType;
        /**
         * 业务定义的卡片回调信息
         * <p> 示例值：无
         */
        this.callbackInfo = builder.callbackInfo;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getBody() {
        return this.body;
    }

    public void setBody(String body) {
        this.body = body;
    }

    public Boolean getInteractable() {
        return this.interactable;
    }

    public void setInteractable(Boolean interactable) {
        this.interactable = interactable;
    }

    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getOperationType() {
        return this.operationType;
    }

    public void setOperationType(String operationType) {
        this.operationType = operationType;
    }

    public String getCallbackInfo() {
        return this.callbackInfo;
    }

    public void setCallbackInfo(String callbackInfo) {
        this.callbackInfo = callbackInfo;
    }

    public static class Builder {
        /**
         * 卡片json内容
         * <p> 示例值：无
         */
        private String body;
        /**
         * 是否为交互卡片
         * <p> 示例值：true
         */
        private Boolean interactable;
        /**
         * 卡片类型
         * <p> 示例值：14
         */
        private String type;
        /**
         * 操作类型
         * <p> 示例值：UPDATE
         */
        private String operationType;
        /**
         * 业务定义的卡片回调信息
         * <p> 示例值：无
         */
        private String callbackInfo;

        /**
         * 卡片json内容
         * <p> 示例值：无
         *
         * @param body
         * @return
         */
        public Builder body(String body) {
            this.body = body;
            return this;
        }


        /**
         * 是否为交互卡片
         * <p> 示例值：true
         *
         * @param interactable
         * @return
         */
        public Builder interactable(Boolean interactable) {
            this.interactable = interactable;
            return this;
        }


        /**
         * 卡片类型
         * <p> 示例值：14
         *
         * @param type
         * @return
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }


        /**
         * 操作类型
         * <p> 示例值：UPDATE
         *
         * @param operationType
         * @return
         */
        public Builder operationType(String operationType) {
            this.operationType = operationType;
            return this;
        }


        /**
         * 业务定义的卡片回调信息
         * <p> 示例值：无
         *
         * @param callbackInfo
         * @return
         */
        public Builder callbackInfo(String callbackInfo) {
            this.callbackInfo = callbackInfo;
            return this;
        }


        public CardPresent build() {
            return new CardPresent(this);
        }
    }
}

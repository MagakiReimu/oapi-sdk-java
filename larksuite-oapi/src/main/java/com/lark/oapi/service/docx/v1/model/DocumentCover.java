// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.docx.v1.model;

import com.lark.oapi.core.response.EmptyData;
import com.lark.oapi.service.docx.v1.enums.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.SerializedName;
import com.lark.oapi.core.annotation.Body;
import com.lark.oapi.core.annotation.Path;
import com.lark.oapi.core.annotation.Query;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import com.lark.oapi.core.utils.Strings;
import com.lark.oapi.core.response.BaseResponse;

public class DocumentCover {
    /**
     * 图片 token
     * <p> 示例值：O9E7bhebQooOzMx7yc7cSabcdef
     */
    @SerializedName("token")
    private String token;
    /**
     * 展示视图在水平方向的偏移比例。其值为距离原图中心的水平方向偏移值 px / 原图宽度 px。 视图在原图中心时，该值为 0； 视图在原图右部分时，该值为正数； 视图在原图左部分时，改值为负数。
     * <p> 示例值：0
     */
    @SerializedName("offset_ratio_x")
    private Double offsetRatioX;
    /**
     * 展示视图在垂直方向的偏移比例。其值为距离原图中心的垂直方向偏移值 px / 原图高度 px。 视图在原图中心时，该值为 0； 视图在原图上部分时，该值为正数； 视图在原图下部分时，改值为负数。
     * <p> 示例值：0
     */
    @SerializedName("offset_ratio_y")
    private Double offsetRatioY;

    // builder 开始
    public DocumentCover() {
    }

    public DocumentCover(Builder builder) {
        /**
         * 图片 token
         * <p> 示例值：O9E7bhebQooOzMx7yc7cSabcdef
         */
        this.token = builder.token;
        /**
         * 展示视图在水平方向的偏移比例。其值为距离原图中心的水平方向偏移值 px / 原图宽度 px。 视图在原图中心时，该值为 0； 视图在原图右部分时，该值为正数； 视图在原图左部分时，改值为负数。
         * <p> 示例值：0
         */
        this.offsetRatioX = builder.offsetRatioX;
        /**
         * 展示视图在垂直方向的偏移比例。其值为距离原图中心的垂直方向偏移值 px / 原图高度 px。 视图在原图中心时，该值为 0； 视图在原图上部分时，该值为正数； 视图在原图下部分时，改值为负数。
         * <p> 示例值：0
         */
        this.offsetRatioY = builder.offsetRatioY;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getToken() {
        return this.token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public Double getOffsetRatioX() {
        return this.offsetRatioX;
    }

    public void setOffsetRatioX(Double offsetRatioX) {
        this.offsetRatioX = offsetRatioX;
    }

    public Double getOffsetRatioY() {
        return this.offsetRatioY;
    }

    public void setOffsetRatioY(Double offsetRatioY) {
        this.offsetRatioY = offsetRatioY;
    }

    public static class Builder {
        /**
         * 图片 token
         * <p> 示例值：O9E7bhebQooOzMx7yc7cSabcdef
         */
        private String token;
        /**
         * 展示视图在水平方向的偏移比例。其值为距离原图中心的水平方向偏移值 px / 原图宽度 px。 视图在原图中心时，该值为 0； 视图在原图右部分时，该值为正数； 视图在原图左部分时，改值为负数。
         * <p> 示例值：0
         */
        private Double offsetRatioX;
        /**
         * 展示视图在垂直方向的偏移比例。其值为距离原图中心的垂直方向偏移值 px / 原图高度 px。 视图在原图中心时，该值为 0； 视图在原图上部分时，该值为正数； 视图在原图下部分时，改值为负数。
         * <p> 示例值：0
         */
        private Double offsetRatioY;

        /**
         * 图片 token
         * <p> 示例值：O9E7bhebQooOzMx7yc7cSabcdef
         *
         * @param token
         * @return
         */
        public Builder token(String token) {
            this.token = token;
            return this;
        }


        /**
         * 展示视图在水平方向的偏移比例。其值为距离原图中心的水平方向偏移值 px / 原图宽度 px。 视图在原图中心时，该值为 0； 视图在原图右部分时，该值为正数； 视图在原图左部分时，改值为负数。
         * <p> 示例值：0
         *
         * @param offsetRatioX
         * @return
         */
        public Builder offsetRatioX(Double offsetRatioX) {
            this.offsetRatioX = offsetRatioX;
            return this;
        }


        /**
         * 展示视图在垂直方向的偏移比例。其值为距离原图中心的垂直方向偏移值 px / 原图高度 px。 视图在原图中心时，该值为 0； 视图在原图上部分时，该值为正数； 视图在原图下部分时，改值为负数。
         * <p> 示例值：0
         *
         * @param offsetRatioY
         * @return
         */
        public Builder offsetRatioY(Double offsetRatioY) {
            this.offsetRatioY = offsetRatioY;
            return this;
        }


        public DocumentCover build() {
            return new DocumentCover(this);
        }
    }
}

// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.search.v2.model;

import com.google.gson.annotations.SerializedName;

public class SchemaSortOptions {
    /**
     * 排序的优先级，可选范围为 0~4，0为最高优先级。如果优先级相同，则随机进行排序。默认为0
     * <p> 示例值：0
     */
    @SerializedName("priority")
    private Integer priority;
    /**
     * 排序的顺序。默认为 desc
     * <p> 示例值：asc
     */
    @SerializedName("order")
    private String order;

    // builder 开始
    public SchemaSortOptions() {
    }

    public SchemaSortOptions(Builder builder) {
        /**
         * 排序的优先级，可选范围为 0~4，0为最高优先级。如果优先级相同，则随机进行排序。默认为0
         * <p> 示例值：0
         */
        this.priority = builder.priority;
        /**
         * 排序的顺序。默认为 desc
         * <p> 示例值：asc
         */
        this.order = builder.order;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public Integer getPriority() {
        return this.priority;
    }

    public void setPriority(Integer priority) {
        this.priority = priority;
    }

    public String getOrder() {
        return this.order;
    }

    public void setOrder(String order) {
        this.order = order;
    }

    public static class Builder {
        /**
         * 排序的优先级，可选范围为 0~4，0为最高优先级。如果优先级相同，则随机进行排序。默认为0
         * <p> 示例值：0
         */
        private Integer priority;
        /**
         * 排序的顺序。默认为 desc
         * <p> 示例值：asc
         */
        private String order;

        /**
         * 排序的优先级，可选范围为 0~4，0为最高优先级。如果优先级相同，则随机进行排序。默认为0
         * <p> 示例值：0
         *
         * @param priority
         * @return
         */
        public Builder priority(Integer priority) {
            this.priority = priority;
            return this;
        }

        /**
         * 排序的优先级，可选范围为 0~4，0为最高优先级。如果优先级相同，则随机进行排序。默认为0
         * <p> 示例值：0
         *
         * @param priority {@link com.lark.oapi.service.search.v2.enums.SchemaSortOptionsSchemaSortPriorityEnum}
         * @return
         */
        public Builder priority(com.lark.oapi.service.search.v2.enums.SchemaSortOptionsSchemaSortPriorityEnum priority) {
            this.priority = priority.getValue();
            return this;
        }


        /**
         * 排序的顺序。默认为 desc
         * <p> 示例值：asc
         *
         * @param order
         * @return
         */
        public Builder order(String order) {
            this.order = order;
            return this;
        }

        /**
         * 排序的顺序。默认为 desc
         * <p> 示例值：asc
         *
         * @param order {@link com.lark.oapi.service.search.v2.enums.SchemaSortOptionsSchemaSortOrderEnum}
         * @return
         */
        public Builder order(com.lark.oapi.service.search.v2.enums.SchemaSortOptionsSchemaSortOrderEnum order) {
            this.order = order.getValue();
            return this;
        }


        public SchemaSortOptions build() {
            return new SchemaSortOptions(this);
        }
    }
}

// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.calendar.v4.model;

import com.google.gson.annotations.SerializedName;

public class EventCard {
    /**
     * 日程主题
     * <p> 示例值：日程主题
     */
    @SerializedName("summary")
    private String summary;
    /**
     * 日程开始时间，日期+时间格式
     * <p> 示例值：2023-01-01T00:00
     */
    @SerializedName("start_time")
    private String startTime;
    /**
     * 日程结束时间，日期+时间格式
     * <p> 示例值：2023-01-01T01:00
     */
    @SerializedName("end_time")
    private String endTime;
    /**
     * 日程开始时间时区
     * <p> 示例值：Asia/Shanghai
     */
    @SerializedName("start_timezone")
    private String startTimezone;
    /**
     * 日程参与人open ID
     * <p> 示例值：ou_xxx;ou_yyy
     */
    @SerializedName("participant_ids")
    private String participantIds;
    /**
     * 日程的重复性规则
     * <p> 示例值：FREQ=DAILY;INTERVAL=1
     */
    @SerializedName("recurrence_rule")
    private String recurrenceRule;
    /**
     * 需要预定的会议室ID列表
     * <p> 示例值：omm_xxx;omm_yyy
     */
    @SerializedName("meeting_room_ids")
    private String meetingRoomIds;
    /**
     * 需要预定的日程长度
     * <p> 示例值：1小时30分钟
     */
    @SerializedName("duration")
    private String duration;
    /**
     * 是否需要生成会议纪要
     * <p> 示例值：true
     */
    @SerializedName("need_meeting_notes")
    private String needMeetingNotes;
    /**
     * 上下文信息 schema 版本
     * <p> 示例值：v1
     */
    @SerializedName("scenario_context_schema_version")
    private String scenarioContextSchemaVersion;
    /**
     * 上下文信息
     * <p> 示例值：
     */
    @SerializedName("scenario_context")
    private CalendarUnderstandScenarioContext scenarioContext;

    // builder 开始
    public EventCard() {
    }

    public EventCard(Builder builder) {
        /**
         * 日程主题
         * <p> 示例值：日程主题
         */
        this.summary = builder.summary;
        /**
         * 日程开始时间，日期+时间格式
         * <p> 示例值：2023-01-01T00:00
         */
        this.startTime = builder.startTime;
        /**
         * 日程结束时间，日期+时间格式
         * <p> 示例值：2023-01-01T01:00
         */
        this.endTime = builder.endTime;
        /**
         * 日程开始时间时区
         * <p> 示例值：Asia/Shanghai
         */
        this.startTimezone = builder.startTimezone;
        /**
         * 日程参与人open ID
         * <p> 示例值：ou_xxx;ou_yyy
         */
        this.participantIds = builder.participantIds;
        /**
         * 日程的重复性规则
         * <p> 示例值：FREQ=DAILY;INTERVAL=1
         */
        this.recurrenceRule = builder.recurrenceRule;
        /**
         * 需要预定的会议室ID列表
         * <p> 示例值：omm_xxx;omm_yyy
         */
        this.meetingRoomIds = builder.meetingRoomIds;
        /**
         * 需要预定的日程长度
         * <p> 示例值：1小时30分钟
         */
        this.duration = builder.duration;
        /**
         * 是否需要生成会议纪要
         * <p> 示例值：true
         */
        this.needMeetingNotes = builder.needMeetingNotes;
        /**
         * 上下文信息 schema 版本
         * <p> 示例值：v1
         */
        this.scenarioContextSchemaVersion = builder.scenarioContextSchemaVersion;
        /**
         * 上下文信息
         * <p> 示例值：
         */
        this.scenarioContext = builder.scenarioContext;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getSummary() {
        return this.summary;
    }

    public void setSummary(String summary) {
        this.summary = summary;
    }

    public String getStartTime() {
        return this.startTime;
    }

    public void setStartTime(String startTime) {
        this.startTime = startTime;
    }

    public String getEndTime() {
        return this.endTime;
    }

    public void setEndTime(String endTime) {
        this.endTime = endTime;
    }

    public String getStartTimezone() {
        return this.startTimezone;
    }

    public void setStartTimezone(String startTimezone) {
        this.startTimezone = startTimezone;
    }

    public String getParticipantIds() {
        return this.participantIds;
    }

    public void setParticipantIds(String participantIds) {
        this.participantIds = participantIds;
    }

    public String getRecurrenceRule() {
        return this.recurrenceRule;
    }

    public void setRecurrenceRule(String recurrenceRule) {
        this.recurrenceRule = recurrenceRule;
    }

    public String getMeetingRoomIds() {
        return this.meetingRoomIds;
    }

    public void setMeetingRoomIds(String meetingRoomIds) {
        this.meetingRoomIds = meetingRoomIds;
    }

    public String getDuration() {
        return this.duration;
    }

    public void setDuration(String duration) {
        this.duration = duration;
    }

    public String getNeedMeetingNotes() {
        return this.needMeetingNotes;
    }

    public void setNeedMeetingNotes(String needMeetingNotes) {
        this.needMeetingNotes = needMeetingNotes;
    }

    public String getScenarioContextSchemaVersion() {
        return this.scenarioContextSchemaVersion;
    }

    public void setScenarioContextSchemaVersion(String scenarioContextSchemaVersion) {
        this.scenarioContextSchemaVersion = scenarioContextSchemaVersion;
    }

    public CalendarUnderstandScenarioContext getScenarioContext() {
        return this.scenarioContext;
    }

    public void setScenarioContext(CalendarUnderstandScenarioContext scenarioContext) {
        this.scenarioContext = scenarioContext;
    }

    public static class Builder {
        /**
         * 日程主题
         * <p> 示例值：日程主题
         */
        private String summary;
        /**
         * 日程开始时间，日期+时间格式
         * <p> 示例值：2023-01-01T00:00
         */
        private String startTime;
        /**
         * 日程结束时间，日期+时间格式
         * <p> 示例值：2023-01-01T01:00
         */
        private String endTime;
        /**
         * 日程开始时间时区
         * <p> 示例值：Asia/Shanghai
         */
        private String startTimezone;
        /**
         * 日程参与人open ID
         * <p> 示例值：ou_xxx;ou_yyy
         */
        private String participantIds;
        /**
         * 日程的重复性规则
         * <p> 示例值：FREQ=DAILY;INTERVAL=1
         */
        private String recurrenceRule;
        /**
         * 需要预定的会议室ID列表
         * <p> 示例值：omm_xxx;omm_yyy
         */
        private String meetingRoomIds;
        /**
         * 需要预定的日程长度
         * <p> 示例值：1小时30分钟
         */
        private String duration;
        /**
         * 是否需要生成会议纪要
         * <p> 示例值：true
         */
        private String needMeetingNotes;
        /**
         * 上下文信息 schema 版本
         * <p> 示例值：v1
         */
        private String scenarioContextSchemaVersion;
        /**
         * 上下文信息
         * <p> 示例值：
         */
        private CalendarUnderstandScenarioContext scenarioContext;

        /**
         * 日程主题
         * <p> 示例值：日程主题
         *
         * @param summary
         * @return
         */
        public Builder summary(String summary) {
            this.summary = summary;
            return this;
        }


        /**
         * 日程开始时间，日期+时间格式
         * <p> 示例值：2023-01-01T00:00
         *
         * @param startTime
         * @return
         */
        public Builder startTime(String startTime) {
            this.startTime = startTime;
            return this;
        }


        /**
         * 日程结束时间，日期+时间格式
         * <p> 示例值：2023-01-01T01:00
         *
         * @param endTime
         * @return
         */
        public Builder endTime(String endTime) {
            this.endTime = endTime;
            return this;
        }


        /**
         * 日程开始时间时区
         * <p> 示例值：Asia/Shanghai
         *
         * @param startTimezone
         * @return
         */
        public Builder startTimezone(String startTimezone) {
            this.startTimezone = startTimezone;
            return this;
        }


        /**
         * 日程参与人open ID
         * <p> 示例值：ou_xxx;ou_yyy
         *
         * @param participantIds
         * @return
         */
        public Builder participantIds(String participantIds) {
            this.participantIds = participantIds;
            return this;
        }


        /**
         * 日程的重复性规则
         * <p> 示例值：FREQ=DAILY;INTERVAL=1
         *
         * @param recurrenceRule
         * @return
         */
        public Builder recurrenceRule(String recurrenceRule) {
            this.recurrenceRule = recurrenceRule;
            return this;
        }


        /**
         * 需要预定的会议室ID列表
         * <p> 示例值：omm_xxx;omm_yyy
         *
         * @param meetingRoomIds
         * @return
         */
        public Builder meetingRoomIds(String meetingRoomIds) {
            this.meetingRoomIds = meetingRoomIds;
            return this;
        }


        /**
         * 需要预定的日程长度
         * <p> 示例值：1小时30分钟
         *
         * @param duration
         * @return
         */
        public Builder duration(String duration) {
            this.duration = duration;
            return this;
        }


        /**
         * 是否需要生成会议纪要
         * <p> 示例值：true
         *
         * @param needMeetingNotes
         * @return
         */
        public Builder needMeetingNotes(String needMeetingNotes) {
            this.needMeetingNotes = needMeetingNotes;
            return this;
        }


        /**
         * 上下文信息 schema 版本
         * <p> 示例值：v1
         *
         * @param scenarioContextSchemaVersion
         * @return
         */
        public Builder scenarioContextSchemaVersion(String scenarioContextSchemaVersion) {
            this.scenarioContextSchemaVersion = scenarioContextSchemaVersion;
            return this;
        }


        /**
         * 上下文信息
         * <p> 示例值：
         *
         * @param scenarioContext
         * @return
         */
        public Builder scenarioContext(CalendarUnderstandScenarioContext scenarioContext) {
            this.scenarioContext = scenarioContext;
            return this;
        }


        public EventCard build() {
            return new EventCard(this);
        }
    }
}

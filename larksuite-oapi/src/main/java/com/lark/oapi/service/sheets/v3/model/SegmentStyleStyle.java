// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.sheets.v3.model;

import com.google.gson.annotations.SerializedName;

public class SegmentStyleStyle {
    /**
     * 加粗
     * <p> 示例值：true
     */
    @SerializedName("bold")
    private Boolean bold;
    /**
     * 斜体
     * <p> 示例值：true
     */
    @SerializedName("italic")
    private Boolean italic;
    /**
     * 删除线
     * <p> 示例值：true
     */
    @SerializedName("strike_through")
    private Boolean strikeThrough;
    /**
     * 下划线
     * <p> 示例值：true
     */
    @SerializedName("underline")
    private Boolean underline;
    /**
     * 字体颜色
     * <p> 示例值：#ff00ff
     */
    @SerializedName("fore_color")
    private String foreColor;
    /**
     * 字体大小
     * <p> 示例值：
     */
    @SerializedName("font_size")
    private Integer fontSize;

    // builder 开始
    public SegmentStyleStyle() {
    }

    public SegmentStyleStyle(Builder builder) {
        /**
         * 加粗
         * <p> 示例值：true
         */
        this.bold = builder.bold;
        /**
         * 斜体
         * <p> 示例值：true
         */
        this.italic = builder.italic;
        /**
         * 删除线
         * <p> 示例值：true
         */
        this.strikeThrough = builder.strikeThrough;
        /**
         * 下划线
         * <p> 示例值：true
         */
        this.underline = builder.underline;
        /**
         * 字体颜色
         * <p> 示例值：#ff00ff
         */
        this.foreColor = builder.foreColor;
        /**
         * 字体大小
         * <p> 示例值：
         */
        this.fontSize = builder.fontSize;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public Boolean getBold() {
        return this.bold;
    }

    public void setBold(Boolean bold) {
        this.bold = bold;
    }

    public Boolean getItalic() {
        return this.italic;
    }

    public void setItalic(Boolean italic) {
        this.italic = italic;
    }

    public Boolean getStrikeThrough() {
        return this.strikeThrough;
    }

    public void setStrikeThrough(Boolean strikeThrough) {
        this.strikeThrough = strikeThrough;
    }

    public Boolean getUnderline() {
        return this.underline;
    }

    public void setUnderline(Boolean underline) {
        this.underline = underline;
    }

    public String getForeColor() {
        return this.foreColor;
    }

    public void setForeColor(String foreColor) {
        this.foreColor = foreColor;
    }

    public Integer getFontSize() {
        return this.fontSize;
    }

    public void setFontSize(Integer fontSize) {
        this.fontSize = fontSize;
    }

    public static class Builder {
        /**
         * 加粗
         * <p> 示例值：true
         */
        private Boolean bold;
        /**
         * 斜体
         * <p> 示例值：true
         */
        private Boolean italic;
        /**
         * 删除线
         * <p> 示例值：true
         */
        private Boolean strikeThrough;
        /**
         * 下划线
         * <p> 示例值：true
         */
        private Boolean underline;
        /**
         * 字体颜色
         * <p> 示例值：#ff00ff
         */
        private String foreColor;
        /**
         * 字体大小
         * <p> 示例值：
         */
        private Integer fontSize;

        /**
         * 加粗
         * <p> 示例值：true
         *
         * @param bold
         * @return
         */
        public Builder bold(Boolean bold) {
            this.bold = bold;
            return this;
        }


        /**
         * 斜体
         * <p> 示例值：true
         *
         * @param italic
         * @return
         */
        public Builder italic(Boolean italic) {
            this.italic = italic;
            return this;
        }


        /**
         * 删除线
         * <p> 示例值：true
         *
         * @param strikeThrough
         * @return
         */
        public Builder strikeThrough(Boolean strikeThrough) {
            this.strikeThrough = strikeThrough;
            return this;
        }


        /**
         * 下划线
         * <p> 示例值：true
         *
         * @param underline
         * @return
         */
        public Builder underline(Boolean underline) {
            this.underline = underline;
            return this;
        }


        /**
         * 字体颜色
         * <p> 示例值：#ff00ff
         *
         * @param foreColor
         * @return
         */
        public Builder foreColor(String foreColor) {
            this.foreColor = foreColor;
            return this;
        }


        /**
         * 字体大小
         * <p> 示例值：
         *
         * @param fontSize
         * @return
         */
        public Builder fontSize(Integer fontSize) {
            this.fontSize = fontSize;
            return this;
        }


        public SegmentStyleStyle build() {
            return new SegmentStyleStyle(this);
        }
    }
}

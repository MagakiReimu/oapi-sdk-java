// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.vc.v1.model;

import com.lark.oapi.core.response.EmptyData;
import com.lark.oapi.service.vc.v1.enums.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.SerializedName;
import com.lark.oapi.core.annotation.Body;
import com.lark.oapi.core.annotation.Path;
import com.lark.oapi.core.annotation.Query;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import com.lark.oapi.core.utils.Strings;
import com.lark.oapi.core.response.BaseResponse;

public class MeetingAnalyzeOutput {
    /**
     * 会议号
     * <p> 示例值：1
     */
    @SerializedName("meeting_id")
    private String meetingId;
    /**
     * 状态码
     * <p> 示例值：0
     */
    @SerializedName("check_status_code")
    private Integer checkStatusCode;
    /**
     * 客观分析结果
     * <p> 示例值：
     */
    @SerializedName("objective_check_output")
    private ObjectiveCheckOutput objectiveCheckOutput;
    /**
     * 主观分析结果
     * <p> 示例值：
     */
    @SerializedName("subjective_check_output")
    private SubjectiveCheckOutput subjectiveCheckOutput;

    // builder 开始
    public MeetingAnalyzeOutput() {
    }

    public MeetingAnalyzeOutput(Builder builder) {
        /**
         * 会议号
         * <p> 示例值：1
         */
        this.meetingId = builder.meetingId;
        /**
         * 状态码
         * <p> 示例值：0
         */
        this.checkStatusCode = builder.checkStatusCode;
        /**
         * 客观分析结果
         * <p> 示例值：
         */
        this.objectiveCheckOutput = builder.objectiveCheckOutput;
        /**
         * 主观分析结果
         * <p> 示例值：
         */
        this.subjectiveCheckOutput = builder.subjectiveCheckOutput;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getMeetingId() {
        return this.meetingId;
    }

    public void setMeetingId(String meetingId) {
        this.meetingId = meetingId;
    }

    public Integer getCheckStatusCode() {
        return this.checkStatusCode;
    }

    public void setCheckStatusCode(Integer checkStatusCode) {
        this.checkStatusCode = checkStatusCode;
    }

    public ObjectiveCheckOutput getObjectiveCheckOutput() {
        return this.objectiveCheckOutput;
    }

    public void setObjectiveCheckOutput(ObjectiveCheckOutput objectiveCheckOutput) {
        this.objectiveCheckOutput = objectiveCheckOutput;
    }

    public SubjectiveCheckOutput getSubjectiveCheckOutput() {
        return this.subjectiveCheckOutput;
    }

    public void setSubjectiveCheckOutput(SubjectiveCheckOutput subjectiveCheckOutput) {
        this.subjectiveCheckOutput = subjectiveCheckOutput;
    }

    public static class Builder {
        /**
         * 会议号
         * <p> 示例值：1
         */
        private String meetingId;
        /**
         * 状态码
         * <p> 示例值：0
         */
        private Integer checkStatusCode;
        /**
         * 客观分析结果
         * <p> 示例值：
         */
        private ObjectiveCheckOutput objectiveCheckOutput;
        /**
         * 主观分析结果
         * <p> 示例值：
         */
        private SubjectiveCheckOutput subjectiveCheckOutput;

        /**
         * 会议号
         * <p> 示例值：1
         *
         * @param meetingId
         * @return
         */
        public Builder meetingId(String meetingId) {
            this.meetingId = meetingId;
            return this;
        }


        /**
         * 状态码
         * <p> 示例值：0
         *
         * @param checkStatusCode
         * @return
         */
        public Builder checkStatusCode(Integer checkStatusCode) {
            this.checkStatusCode = checkStatusCode;
            return this;
        }


        /**
         * 客观分析结果
         * <p> 示例值：
         *
         * @param objectiveCheckOutput
         * @return
         */
        public Builder objectiveCheckOutput(ObjectiveCheckOutput objectiveCheckOutput) {
            this.objectiveCheckOutput = objectiveCheckOutput;
            return this;
        }


        /**
         * 主观分析结果
         * <p> 示例值：
         *
         * @param subjectiveCheckOutput
         * @return
         */
        public Builder subjectiveCheckOutput(SubjectiveCheckOutput subjectiveCheckOutput) {
            this.subjectiveCheckOutput = subjectiveCheckOutput;
            return this;
        }


        public MeetingAnalyzeOutput build() {
            return new MeetingAnalyzeOutput(this);
        }
    }
}

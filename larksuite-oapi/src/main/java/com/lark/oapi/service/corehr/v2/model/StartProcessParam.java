// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.corehr.v2.model;

import com.lark.oapi.core.response.EmptyData;
import com.lark.oapi.service.corehr.v2.enums.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.SerializedName;
import com.lark.oapi.core.annotation.Body;
import com.lark.oapi.core.annotation.Path;
import com.lark.oapi.core.annotation.Query;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import com.lark.oapi.core.utils.Strings;
import com.lark.oapi.core.response.BaseResponse;

public class StartProcessParam {
    /**
     * 流程定义标识
     * <p> 示例值：custom
     */
    @SerializedName("flow_api_name")
    private String flowApiName;
    /**
     * 发起人用户ID，按user_id_type类型传递。如果system_initiator为false，则必填；为true时非必填。
     * <p> 示例值：ou_91791271921729102012
     */
    @SerializedName("initiator_id")
    private String initiatorId;
    /**
     * 是否为系统身份发起流程。 true - 使用系统身份发起，若使用系统身份；false - 按照所传的人员身份审批
     * <p> 示例值：true
     */
    @SerializedName("system_initiator")
    private Boolean systemInitiator;
    /**
     * 业务数据
     * <p> 示例值：
     */
    @SerializedName("flow_data")
    private ProcessFormVariableV2[] flowData;

    // builder 开始
    public StartProcessParam() {
    }

    public StartProcessParam(Builder builder) {
        /**
         * 流程定义标识
         * <p> 示例值：custom
         */
        this.flowApiName = builder.flowApiName;
        /**
         * 发起人用户ID，按user_id_type类型传递。如果system_initiator为false，则必填；为true时非必填。
         * <p> 示例值：ou_91791271921729102012
         */
        this.initiatorId = builder.initiatorId;
        /**
         * 是否为系统身份发起流程。 true - 使用系统身份发起，若使用系统身份；false - 按照所传的人员身份审批
         * <p> 示例值：true
         */
        this.systemInitiator = builder.systemInitiator;
        /**
         * 业务数据
         * <p> 示例值：
         */
        this.flowData = builder.flowData;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getFlowApiName() {
        return this.flowApiName;
    }

    public void setFlowApiName(String flowApiName) {
        this.flowApiName = flowApiName;
    }

    public String getInitiatorId() {
        return this.initiatorId;
    }

    public void setInitiatorId(String initiatorId) {
        this.initiatorId = initiatorId;
    }

    public Boolean getSystemInitiator() {
        return this.systemInitiator;
    }

    public void setSystemInitiator(Boolean systemInitiator) {
        this.systemInitiator = systemInitiator;
    }

    public ProcessFormVariableV2[] getFlowData() {
        return this.flowData;
    }

    public void setFlowData(ProcessFormVariableV2[] flowData) {
        this.flowData = flowData;
    }

    public static class Builder {
        /**
         * 流程定义标识
         * <p> 示例值：custom
         */
        private String flowApiName;
        /**
         * 发起人用户ID，按user_id_type类型传递。如果system_initiator为false，则必填；为true时非必填。
         * <p> 示例值：ou_91791271921729102012
         */
        private String initiatorId;
        /**
         * 是否为系统身份发起流程。 true - 使用系统身份发起，若使用系统身份；false - 按照所传的人员身份审批
         * <p> 示例值：true
         */
        private Boolean systemInitiator;
        /**
         * 业务数据
         * <p> 示例值：
         */
        private ProcessFormVariableV2[] flowData;

        /**
         * 流程定义标识
         * <p> 示例值：custom
         *
         * @param flowApiName
         * @return
         */
        public Builder flowApiName(String flowApiName) {
            this.flowApiName = flowApiName;
            return this;
        }


        /**
         * 发起人用户ID，按user_id_type类型传递。如果system_initiator为false，则必填；为true时非必填。
         * <p> 示例值：ou_91791271921729102012
         *
         * @param initiatorId
         * @return
         */
        public Builder initiatorId(String initiatorId) {
            this.initiatorId = initiatorId;
            return this;
        }


        /**
         * 是否为系统身份发起流程。 true - 使用系统身份发起，若使用系统身份；false - 按照所传的人员身份审批
         * <p> 示例值：true
         *
         * @param systemInitiator
         * @return
         */
        public Builder systemInitiator(Boolean systemInitiator) {
            this.systemInitiator = systemInitiator;
            return this;
        }


        /**
         * 业务数据
         * <p> 示例值：
         *
         * @param flowData
         * @return
         */
        public Builder flowData(ProcessFormVariableV2[] flowData) {
            this.flowData = flowData;
            return this;
        }


        public StartProcessParam build() {
            return new StartProcessParam(this);
        }
    }
}

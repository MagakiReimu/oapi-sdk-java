// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.im.v1.model;

import com.google.gson.annotations.SerializedName;

public class MsgProcessData {
    /**
     * 分区日期
     * <p> 示例值：2022-02-02
     */
    @SerializedName("p_date")
    private String pDate;
    /**
     * 部门id
     * <p> 示例值：123456
     */
    @SerializedName("department_id")
    private String departmentId;
    /**
     * 部门路径
     * <p> 示例值：test/subtest
     */
    @SerializedName("department_path")
    private String departmentPath;
    /**
     * 人均重要消息 12 小时阅读率
     * <p> 示例值：0.50
     */
    @SerializedName("avg_imp_msg_read_rate_12h")
    private Double avgImpMsgReadRate12h;
    /**
     * 人均 12 小时阅读率
     * <p> 示例值：0.50
     */
    @SerializedName("msg_read_rate_12h")
    private Double msgReadRate12h;
    /**
     * 人均接收消息数
     * <p> 示例值：50
     */
    @SerializedName("avg_receive_msg_cnt")
    private Double avgReceiveMsgCnt;
    /**
     * 人均阅读消息数
     * <p> 示例值：50
     */
    @SerializedName("avg_read_msg_cnt")
    private Double avgReadMsgCnt;
    /**
     * 人均重要消息阅读数
     * <p> 示例值：50
     */
    @SerializedName("avg_imp_read_msg_cnt")
    private Double avgImpReadMsgCnt;
    /**
     * 人均重要消息接收数
     * <p> 示例值：50
     */
    @SerializedName("avg_imp_receive_msg_cnt")
    private Double avgImpReceiveMsgCnt;
    /**
     * 信息高负载员工占比
     * <p> 示例值：0.50
     */
    @SerializedName("high_load_rate")
    private Double highLoadRate;
    /**
     * 大群（100人以上）消息占比
     * <p> 示例值：0.50
     */
    @SerializedName("big_group_msg_rate")
    private Double bigGroupMsgRate;
    /**
     * 大群消息中话题消息占比
     * <p> 示例值：0.50
     */
    @SerializedName("big_group_topic_msg_rate")
    private Double bigGroupTopicMsgRate;
    /**
     * 人均接收 bot 消息数
     * <p> 示例值：0.50
     */
    @SerializedName("avg_receive_bot_msg_cnt")
    private Double avgReceiveBotMsgCnt;
    /**
     * 重要 bot 消息 12 小时阅读率
     * <p> 示例值：0.50
     */
    @SerializedName("avg_bot_imp_msg_read_rate_12h")
    private Double avgBotImpMsgReadRate12h;
    /**
     * 接收 bot 消息占比
     * <p> 示例值：0.50
     */
    @SerializedName("receive_bot_msg_rate")
    private Double receiveBotMsgRate;
    /**
     * 会话盒子使用率
     * <p> 示例值：0.50
     */
    @SerializedName("use_chat_box_rate")
    private Double useChatBoxRate;
    /**
     * 接收消息中 mute 消息占比
     * <p> 示例值：0.50
     */
    @SerializedName("receive_mute_msg_rate")
    private Double receiveMuteMsgRate;
    /**
     * 阅读消息中 mute 消息占比
     * <p> 示例值：0.50
     */
    @SerializedName("read_mute_msg_rate")
    private Double readMuteMsgRate;
    /**
     * 人均有重要消息的会话数
     * <p> 示例值：50
     */
    @SerializedName("avg_receive_imp_msg_chat_cnt")
    private Double avgReceiveImpMsgChatCnt;

    // builder 开始
    public MsgProcessData() {
    }

    public MsgProcessData(Builder builder) {
        /**
         * 分区日期
         * <p> 示例值：2022-02-02
         */
        this.pDate = builder.pDate;
        /**
         * 部门id
         * <p> 示例值：123456
         */
        this.departmentId = builder.departmentId;
        /**
         * 部门路径
         * <p> 示例值：test/subtest
         */
        this.departmentPath = builder.departmentPath;
        /**
         * 人均重要消息 12 小时阅读率
         * <p> 示例值：0.50
         */
        this.avgImpMsgReadRate12h = builder.avgImpMsgReadRate12h;
        /**
         * 人均 12 小时阅读率
         * <p> 示例值：0.50
         */
        this.msgReadRate12h = builder.msgReadRate12h;
        /**
         * 人均接收消息数
         * <p> 示例值：50
         */
        this.avgReceiveMsgCnt = builder.avgReceiveMsgCnt;
        /**
         * 人均阅读消息数
         * <p> 示例值：50
         */
        this.avgReadMsgCnt = builder.avgReadMsgCnt;
        /**
         * 人均重要消息阅读数
         * <p> 示例值：50
         */
        this.avgImpReadMsgCnt = builder.avgImpReadMsgCnt;
        /**
         * 人均重要消息接收数
         * <p> 示例值：50
         */
        this.avgImpReceiveMsgCnt = builder.avgImpReceiveMsgCnt;
        /**
         * 信息高负载员工占比
         * <p> 示例值：0.50
         */
        this.highLoadRate = builder.highLoadRate;
        /**
         * 大群（100人以上）消息占比
         * <p> 示例值：0.50
         */
        this.bigGroupMsgRate = builder.bigGroupMsgRate;
        /**
         * 大群消息中话题消息占比
         * <p> 示例值：0.50
         */
        this.bigGroupTopicMsgRate = builder.bigGroupTopicMsgRate;
        /**
         * 人均接收 bot 消息数
         * <p> 示例值：0.50
         */
        this.avgReceiveBotMsgCnt = builder.avgReceiveBotMsgCnt;
        /**
         * 重要 bot 消息 12 小时阅读率
         * <p> 示例值：0.50
         */
        this.avgBotImpMsgReadRate12h = builder.avgBotImpMsgReadRate12h;
        /**
         * 接收 bot 消息占比
         * <p> 示例值：0.50
         */
        this.receiveBotMsgRate = builder.receiveBotMsgRate;
        /**
         * 会话盒子使用率
         * <p> 示例值：0.50
         */
        this.useChatBoxRate = builder.useChatBoxRate;
        /**
         * 接收消息中 mute 消息占比
         * <p> 示例值：0.50
         */
        this.receiveMuteMsgRate = builder.receiveMuteMsgRate;
        /**
         * 阅读消息中 mute 消息占比
         * <p> 示例值：0.50
         */
        this.readMuteMsgRate = builder.readMuteMsgRate;
        /**
         * 人均有重要消息的会话数
         * <p> 示例值：50
         */
        this.avgReceiveImpMsgChatCnt = builder.avgReceiveImpMsgChatCnt;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getPDate() {
        return this.pDate;
    }

    public void setPDate(String pDate) {
        this.pDate = pDate;
    }

    public String getDepartmentId() {
        return this.departmentId;
    }

    public void setDepartmentId(String departmentId) {
        this.departmentId = departmentId;
    }

    public String getDepartmentPath() {
        return this.departmentPath;
    }

    public void setDepartmentPath(String departmentPath) {
        this.departmentPath = departmentPath;
    }

    public Double getAvgImpMsgReadRate12h() {
        return this.avgImpMsgReadRate12h;
    }

    public void setAvgImpMsgReadRate12h(Double avgImpMsgReadRate12h) {
        this.avgImpMsgReadRate12h = avgImpMsgReadRate12h;
    }

    public Double getMsgReadRate12h() {
        return this.msgReadRate12h;
    }

    public void setMsgReadRate12h(Double msgReadRate12h) {
        this.msgReadRate12h = msgReadRate12h;
    }

    public Double getAvgReceiveMsgCnt() {
        return this.avgReceiveMsgCnt;
    }

    public void setAvgReceiveMsgCnt(Double avgReceiveMsgCnt) {
        this.avgReceiveMsgCnt = avgReceiveMsgCnt;
    }

    public Double getAvgReadMsgCnt() {
        return this.avgReadMsgCnt;
    }

    public void setAvgReadMsgCnt(Double avgReadMsgCnt) {
        this.avgReadMsgCnt = avgReadMsgCnt;
    }

    public Double getAvgImpReadMsgCnt() {
        return this.avgImpReadMsgCnt;
    }

    public void setAvgImpReadMsgCnt(Double avgImpReadMsgCnt) {
        this.avgImpReadMsgCnt = avgImpReadMsgCnt;
    }

    public Double getAvgImpReceiveMsgCnt() {
        return this.avgImpReceiveMsgCnt;
    }

    public void setAvgImpReceiveMsgCnt(Double avgImpReceiveMsgCnt) {
        this.avgImpReceiveMsgCnt = avgImpReceiveMsgCnt;
    }

    public Double getHighLoadRate() {
        return this.highLoadRate;
    }

    public void setHighLoadRate(Double highLoadRate) {
        this.highLoadRate = highLoadRate;
    }

    public Double getBigGroupMsgRate() {
        return this.bigGroupMsgRate;
    }

    public void setBigGroupMsgRate(Double bigGroupMsgRate) {
        this.bigGroupMsgRate = bigGroupMsgRate;
    }

    public Double getBigGroupTopicMsgRate() {
        return this.bigGroupTopicMsgRate;
    }

    public void setBigGroupTopicMsgRate(Double bigGroupTopicMsgRate) {
        this.bigGroupTopicMsgRate = bigGroupTopicMsgRate;
    }

    public Double getAvgReceiveBotMsgCnt() {
        return this.avgReceiveBotMsgCnt;
    }

    public void setAvgReceiveBotMsgCnt(Double avgReceiveBotMsgCnt) {
        this.avgReceiveBotMsgCnt = avgReceiveBotMsgCnt;
    }

    public Double getAvgBotImpMsgReadRate12h() {
        return this.avgBotImpMsgReadRate12h;
    }

    public void setAvgBotImpMsgReadRate12h(Double avgBotImpMsgReadRate12h) {
        this.avgBotImpMsgReadRate12h = avgBotImpMsgReadRate12h;
    }

    public Double getReceiveBotMsgRate() {
        return this.receiveBotMsgRate;
    }

    public void setReceiveBotMsgRate(Double receiveBotMsgRate) {
        this.receiveBotMsgRate = receiveBotMsgRate;
    }

    public Double getUseChatBoxRate() {
        return this.useChatBoxRate;
    }

    public void setUseChatBoxRate(Double useChatBoxRate) {
        this.useChatBoxRate = useChatBoxRate;
    }

    public Double getReceiveMuteMsgRate() {
        return this.receiveMuteMsgRate;
    }

    public void setReceiveMuteMsgRate(Double receiveMuteMsgRate) {
        this.receiveMuteMsgRate = receiveMuteMsgRate;
    }

    public Double getReadMuteMsgRate() {
        return this.readMuteMsgRate;
    }

    public void setReadMuteMsgRate(Double readMuteMsgRate) {
        this.readMuteMsgRate = readMuteMsgRate;
    }

    public Double getAvgReceiveImpMsgChatCnt() {
        return this.avgReceiveImpMsgChatCnt;
    }

    public void setAvgReceiveImpMsgChatCnt(Double avgReceiveImpMsgChatCnt) {
        this.avgReceiveImpMsgChatCnt = avgReceiveImpMsgChatCnt;
    }

    public static class Builder {
        /**
         * 分区日期
         * <p> 示例值：2022-02-02
         */
        private String pDate;
        /**
         * 部门id
         * <p> 示例值：123456
         */
        private String departmentId;
        /**
         * 部门路径
         * <p> 示例值：test/subtest
         */
        private String departmentPath;
        /**
         * 人均重要消息 12 小时阅读率
         * <p> 示例值：0.50
         */
        private Double avgImpMsgReadRate12h;
        /**
         * 人均 12 小时阅读率
         * <p> 示例值：0.50
         */
        private Double msgReadRate12h;
        /**
         * 人均接收消息数
         * <p> 示例值：50
         */
        private Double avgReceiveMsgCnt;
        /**
         * 人均阅读消息数
         * <p> 示例值：50
         */
        private Double avgReadMsgCnt;
        /**
         * 人均重要消息阅读数
         * <p> 示例值：50
         */
        private Double avgImpReadMsgCnt;
        /**
         * 人均重要消息接收数
         * <p> 示例值：50
         */
        private Double avgImpReceiveMsgCnt;
        /**
         * 信息高负载员工占比
         * <p> 示例值：0.50
         */
        private Double highLoadRate;
        /**
         * 大群（100人以上）消息占比
         * <p> 示例值：0.50
         */
        private Double bigGroupMsgRate;
        /**
         * 大群消息中话题消息占比
         * <p> 示例值：0.50
         */
        private Double bigGroupTopicMsgRate;
        /**
         * 人均接收 bot 消息数
         * <p> 示例值：0.50
         */
        private Double avgReceiveBotMsgCnt;
        /**
         * 重要 bot 消息 12 小时阅读率
         * <p> 示例值：0.50
         */
        private Double avgBotImpMsgReadRate12h;
        /**
         * 接收 bot 消息占比
         * <p> 示例值：0.50
         */
        private Double receiveBotMsgRate;
        /**
         * 会话盒子使用率
         * <p> 示例值：0.50
         */
        private Double useChatBoxRate;
        /**
         * 接收消息中 mute 消息占比
         * <p> 示例值：0.50
         */
        private Double receiveMuteMsgRate;
        /**
         * 阅读消息中 mute 消息占比
         * <p> 示例值：0.50
         */
        private Double readMuteMsgRate;
        /**
         * 人均有重要消息的会话数
         * <p> 示例值：50
         */
        private Double avgReceiveImpMsgChatCnt;

        /**
         * 分区日期
         * <p> 示例值：2022-02-02
         *
         * @param pDate
         * @return
         */
        public Builder pDate(String pDate) {
            this.pDate = pDate;
            return this;
        }


        /**
         * 部门id
         * <p> 示例值：123456
         *
         * @param departmentId
         * @return
         */
        public Builder departmentId(String departmentId) {
            this.departmentId = departmentId;
            return this;
        }


        /**
         * 部门路径
         * <p> 示例值：test/subtest
         *
         * @param departmentPath
         * @return
         */
        public Builder departmentPath(String departmentPath) {
            this.departmentPath = departmentPath;
            return this;
        }


        /**
         * 人均重要消息 12 小时阅读率
         * <p> 示例值：0.50
         *
         * @param avgImpMsgReadRate12h
         * @return
         */
        public Builder avgImpMsgReadRate12h(Double avgImpMsgReadRate12h) {
            this.avgImpMsgReadRate12h = avgImpMsgReadRate12h;
            return this;
        }


        /**
         * 人均 12 小时阅读率
         * <p> 示例值：0.50
         *
         * @param msgReadRate12h
         * @return
         */
        public Builder msgReadRate12h(Double msgReadRate12h) {
            this.msgReadRate12h = msgReadRate12h;
            return this;
        }


        /**
         * 人均接收消息数
         * <p> 示例值：50
         *
         * @param avgReceiveMsgCnt
         * @return
         */
        public Builder avgReceiveMsgCnt(Double avgReceiveMsgCnt) {
            this.avgReceiveMsgCnt = avgReceiveMsgCnt;
            return this;
        }


        /**
         * 人均阅读消息数
         * <p> 示例值：50
         *
         * @param avgReadMsgCnt
         * @return
         */
        public Builder avgReadMsgCnt(Double avgReadMsgCnt) {
            this.avgReadMsgCnt = avgReadMsgCnt;
            return this;
        }


        /**
         * 人均重要消息阅读数
         * <p> 示例值：50
         *
         * @param avgImpReadMsgCnt
         * @return
         */
        public Builder avgImpReadMsgCnt(Double avgImpReadMsgCnt) {
            this.avgImpReadMsgCnt = avgImpReadMsgCnt;
            return this;
        }


        /**
         * 人均重要消息接收数
         * <p> 示例值：50
         *
         * @param avgImpReceiveMsgCnt
         * @return
         */
        public Builder avgImpReceiveMsgCnt(Double avgImpReceiveMsgCnt) {
            this.avgImpReceiveMsgCnt = avgImpReceiveMsgCnt;
            return this;
        }


        /**
         * 信息高负载员工占比
         * <p> 示例值：0.50
         *
         * @param highLoadRate
         * @return
         */
        public Builder highLoadRate(Double highLoadRate) {
            this.highLoadRate = highLoadRate;
            return this;
        }


        /**
         * 大群（100人以上）消息占比
         * <p> 示例值：0.50
         *
         * @param bigGroupMsgRate
         * @return
         */
        public Builder bigGroupMsgRate(Double bigGroupMsgRate) {
            this.bigGroupMsgRate = bigGroupMsgRate;
            return this;
        }


        /**
         * 大群消息中话题消息占比
         * <p> 示例值：0.50
         *
         * @param bigGroupTopicMsgRate
         * @return
         */
        public Builder bigGroupTopicMsgRate(Double bigGroupTopicMsgRate) {
            this.bigGroupTopicMsgRate = bigGroupTopicMsgRate;
            return this;
        }


        /**
         * 人均接收 bot 消息数
         * <p> 示例值：0.50
         *
         * @param avgReceiveBotMsgCnt
         * @return
         */
        public Builder avgReceiveBotMsgCnt(Double avgReceiveBotMsgCnt) {
            this.avgReceiveBotMsgCnt = avgReceiveBotMsgCnt;
            return this;
        }


        /**
         * 重要 bot 消息 12 小时阅读率
         * <p> 示例值：0.50
         *
         * @param avgBotImpMsgReadRate12h
         * @return
         */
        public Builder avgBotImpMsgReadRate12h(Double avgBotImpMsgReadRate12h) {
            this.avgBotImpMsgReadRate12h = avgBotImpMsgReadRate12h;
            return this;
        }


        /**
         * 接收 bot 消息占比
         * <p> 示例值：0.50
         *
         * @param receiveBotMsgRate
         * @return
         */
        public Builder receiveBotMsgRate(Double receiveBotMsgRate) {
            this.receiveBotMsgRate = receiveBotMsgRate;
            return this;
        }


        /**
         * 会话盒子使用率
         * <p> 示例值：0.50
         *
         * @param useChatBoxRate
         * @return
         */
        public Builder useChatBoxRate(Double useChatBoxRate) {
            this.useChatBoxRate = useChatBoxRate;
            return this;
        }


        /**
         * 接收消息中 mute 消息占比
         * <p> 示例值：0.50
         *
         * @param receiveMuteMsgRate
         * @return
         */
        public Builder receiveMuteMsgRate(Double receiveMuteMsgRate) {
            this.receiveMuteMsgRate = receiveMuteMsgRate;
            return this;
        }


        /**
         * 阅读消息中 mute 消息占比
         * <p> 示例值：0.50
         *
         * @param readMuteMsgRate
         * @return
         */
        public Builder readMuteMsgRate(Double readMuteMsgRate) {
            this.readMuteMsgRate = readMuteMsgRate;
            return this;
        }


        /**
         * 人均有重要消息的会话数
         * <p> 示例值：50
         *
         * @param avgReceiveImpMsgChatCnt
         * @return
         */
        public Builder avgReceiveImpMsgChatCnt(Double avgReceiveImpMsgChatCnt) {
            this.avgReceiveImpMsgChatCnt = avgReceiveImpMsgChatCnt;
            return this;
        }


        public MsgProcessData build() {
            return new MsgProcessData(this);
        }
    }
}

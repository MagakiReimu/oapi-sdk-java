// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.search.v2.model;

import com.google.gson.annotations.SerializedName;

public class Doc {
    /**
     * 文档的唯一标识，只允许英文字母、数字和下划线
     * <p> 示例值：3953903108179099667
     */
    @SerializedName("doc_id")
    private String docId;
    /**
     * 文档对应filter_schema的值
     * <p> 示例值：{\"domains\": [\"domain1\"],\"versions\": [\"v1\"]}
     */
    @SerializedName("filter_data")
    private String filterData;
    /**
     * 文本块列表
     * <p> 示例值：
     */
    @SerializedName("chunks")
    private Chunk[] chunks;

    // builder 开始
    public Doc() {
    }

    public Doc(Builder builder) {
        /**
         * 文档的唯一标识，只允许英文字母、数字和下划线
         * <p> 示例值：3953903108179099667
         */
        this.docId = builder.docId;
        /**
         * 文档对应filter_schema的值
         * <p> 示例值：{\"domains\": [\"domain1\"],\"versions\": [\"v1\"]}
         */
        this.filterData = builder.filterData;
        /**
         * 文本块列表
         * <p> 示例值：
         */
        this.chunks = builder.chunks;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getDocId() {
        return this.docId;
    }

    public void setDocId(String docId) {
        this.docId = docId;
    }

    public String getFilterData() {
        return this.filterData;
    }

    public void setFilterData(String filterData) {
        this.filterData = filterData;
    }

    public Chunk[] getChunks() {
        return this.chunks;
    }

    public void setChunks(Chunk[] chunks) {
        this.chunks = chunks;
    }

    public static class Builder {
        /**
         * 文档的唯一标识，只允许英文字母、数字和下划线
         * <p> 示例值：3953903108179099667
         */
        private String docId;
        /**
         * 文档对应filter_schema的值
         * <p> 示例值：{\"domains\": [\"domain1\"],\"versions\": [\"v1\"]}
         */
        private String filterData;
        /**
         * 文本块列表
         * <p> 示例值：
         */
        private Chunk[] chunks;

        /**
         * 文档的唯一标识，只允许英文字母、数字和下划线
         * <p> 示例值：3953903108179099667
         *
         * @param docId
         * @return
         */
        public Builder docId(String docId) {
            this.docId = docId;
            return this;
        }


        /**
         * 文档对应filter_schema的值
         * <p> 示例值：{\"domains\": [\"domain1\"],\"versions\": [\"v1\"]}
         *
         * @param filterData
         * @return
         */
        public Builder filterData(String filterData) {
            this.filterData = filterData;
            return this;
        }


        /**
         * 文本块列表
         * <p> 示例值：
         *
         * @param chunks
         * @return
         */
        public Builder chunks(Chunk[] chunks) {
            this.chunks = chunks;
            return this;
        }


        public Doc build() {
            return new Doc(this);
        }
    }
}

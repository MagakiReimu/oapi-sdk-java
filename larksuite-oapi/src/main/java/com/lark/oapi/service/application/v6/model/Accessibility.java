// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.application.v6.model;

import com.google.gson.annotations.SerializedName;

public class Accessibility {
    /**
     * 更新访问状态原因说明，停用OpenAPI时将作为OpenAPI错误消息返回；若设置停用，则该字段必填.
     * <p> 示例值：应用发送消息过于频繁，暂停应用调用发送OpenAPI
     */
    @SerializedName("reason")
    private String reason;
    /**
     * 访问状态,取值"Enable"或"Disable"
     * <p> 示例值：Enable
     */
    @SerializedName("state")
    private String state;

    // builder 开始
    public Accessibility() {
    }

    public Accessibility(Builder builder) {
        /**
         * 更新访问状态原因说明，停用OpenAPI时将作为OpenAPI错误消息返回；若设置停用，则该字段必填.
         * <p> 示例值：应用发送消息过于频繁，暂停应用调用发送OpenAPI
         */
        this.reason = builder.reason;
        /**
         * 访问状态,取值"Enable"或"Disable"
         * <p> 示例值：Enable
         */
        this.state = builder.state;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getReason() {
        return this.reason;
    }

    public void setReason(String reason) {
        this.reason = reason;
    }

    public String getState() {
        return this.state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public static class Builder {
        /**
         * 更新访问状态原因说明，停用OpenAPI时将作为OpenAPI错误消息返回；若设置停用，则该字段必填.
         * <p> 示例值：应用发送消息过于频繁，暂停应用调用发送OpenAPI
         */
        private String reason;
        /**
         * 访问状态,取值"Enable"或"Disable"
         * <p> 示例值：Enable
         */
        private String state;

        /**
         * 更新访问状态原因说明，停用OpenAPI时将作为OpenAPI错误消息返回；若设置停用，则该字段必填.
         * <p> 示例值：应用发送消息过于频繁，暂停应用调用发送OpenAPI
         *
         * @param reason
         * @return
         */
        public Builder reason(String reason) {
            this.reason = reason;
            return this;
        }


        /**
         * 访问状态,取值"Enable"或"Disable"
         * <p> 示例值：Enable
         *
         * @param state
         * @return
         */
        public Builder state(String state) {
            this.state = state;
            return this;
        }


        public Accessibility build() {
            return new Accessibility(this);
        }
    }
}

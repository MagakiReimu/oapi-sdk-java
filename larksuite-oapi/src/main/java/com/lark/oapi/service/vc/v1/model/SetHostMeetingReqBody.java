// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.vc.v1.model;

import com.google.gson.annotations.SerializedName;

public class SetHostMeetingReqBody {
    /**
     * 将要设置的主持人
     * <p> 示例值：
     */
    @SerializedName("host_user")
    private MeetingUser hostUser;
    /**
     * 当前主持人（CAS并发安全：如果和会中当前主持人不符则会设置失败，可使用返回的最新数据重新设置）
     * <p> 示例值：
     */
    @SerializedName("old_host_user")
    private MeetingUser oldHostUser;

    // builder 开始
    public SetHostMeetingReqBody() {
    }

    public SetHostMeetingReqBody(Builder builder) {
        /**
         * 将要设置的主持人
         * <p> 示例值：
         */
        this.hostUser = builder.hostUser;
        /**
         * 当前主持人（CAS并发安全：如果和会中当前主持人不符则会设置失败，可使用返回的最新数据重新设置）
         * <p> 示例值：
         */
        this.oldHostUser = builder.oldHostUser;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public MeetingUser getHostUser() {
        return this.hostUser;
    }

    public void setHostUser(MeetingUser hostUser) {
        this.hostUser = hostUser;
    }

    public MeetingUser getOldHostUser() {
        return this.oldHostUser;
    }

    public void setOldHostUser(MeetingUser oldHostUser) {
        this.oldHostUser = oldHostUser;
    }

    public static class Builder {
        /**
         * 将要设置的主持人
         * <p> 示例值：
         */
        private MeetingUser hostUser;
        /**
         * 当前主持人（CAS并发安全：如果和会中当前主持人不符则会设置失败，可使用返回的最新数据重新设置）
         * <p> 示例值：
         */
        private MeetingUser oldHostUser;

        /**
         * 将要设置的主持人
         * <p> 示例值：
         *
         * @param hostUser
         * @return
         */
        public Builder hostUser(MeetingUser hostUser) {
            this.hostUser = hostUser;
            return this;
        }


        /**
         * 当前主持人（CAS并发安全：如果和会中当前主持人不符则会设置失败，可使用返回的最新数据重新设置）
         * <p> 示例值：
         *
         * @param oldHostUser
         * @return
         */
        public Builder oldHostUser(MeetingUser oldHostUser) {
            this.oldHostUser = oldHostUser;
            return this;
        }


        public SetHostMeetingReqBody build() {
            return new SetHostMeetingReqBody(this);
        }
    }
}

// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.document_ai.v1.model;

import com.lark.oapi.core.response.EmptyData;
import com.lark.oapi.service.document_ai.v1.enums.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.SerializedName;
import com.lark.oapi.core.annotation.Body;
import com.lark.oapi.core.annotation.Path;
import com.lark.oapi.core.annotation.Query;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import com.lark.oapi.core.utils.Strings;
import com.lark.oapi.core.response.BaseResponse;

public class LlmMessage {
    /**
     * 角色名
     * <p> 示例值：user
     */
    @SerializedName("role")
    private String role;
    /**
     * 内容信息，如果同时输入多张图片和多段文本，默认将所有图片置于开头，取第一段文本作为输入的prompt；如果是图片，目前1个query (dict)最多输入3张图片，每张图片大小不超过3000*3000
     * <p> 示例值：
     */
    @SerializedName("contents")
    private LlmContent[] contents;

    // builder 开始
    public LlmMessage() {
    }

    public LlmMessage(Builder builder) {
        /**
         * 角色名
         * <p> 示例值：user
         */
        this.role = builder.role;
        /**
         * 内容信息，如果同时输入多张图片和多段文本，默认将所有图片置于开头，取第一段文本作为输入的prompt；如果是图片，目前1个query (dict)最多输入3张图片，每张图片大小不超过3000*3000
         * <p> 示例值：
         */
        this.contents = builder.contents;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getRole() {
        return this.role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public LlmContent[] getContents() {
        return this.contents;
    }

    public void setContents(LlmContent[] contents) {
        this.contents = contents;
    }

    public static class Builder {
        /**
         * 角色名
         * <p> 示例值：user
         */
        private String role;
        /**
         * 内容信息，如果同时输入多张图片和多段文本，默认将所有图片置于开头，取第一段文本作为输入的prompt；如果是图片，目前1个query (dict)最多输入3张图片，每张图片大小不超过3000*3000
         * <p> 示例值：
         */
        private LlmContent[] contents;

        /**
         * 角色名
         * <p> 示例值：user
         *
         * @param role
         * @return
         */
        public Builder role(String role) {
            this.role = role;
            return this;
        }


        /**
         * 内容信息，如果同时输入多张图片和多段文本，默认将所有图片置于开头，取第一段文本作为输入的prompt；如果是图片，目前1个query (dict)最多输入3张图片，每张图片大小不超过3000*3000
         * <p> 示例值：
         *
         * @param contents
         * @return
         */
        public Builder contents(LlmContent[] contents) {
            this.contents = contents;
            return this;
        }


        public LlmMessage build() {
            return new LlmMessage(this);
        }
    }
}

// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.task.v2.model;

import com.google.gson.annotations.SerializedName;

public class Due {
    /**
     * 截止时间/日期的时间戳，距1970-01-01 00:00:00的毫秒数。如果截止时间是一个日期，需要把日期转换成时间戳，并设置 is_all_day=true
     * <p> 示例值：1675454764000
     */
    @SerializedName("timestamp")
    private String timestamp;
    /**
     * 是否截止到一个日期。如果设为true，timestamp中只有日期的部分会被解析和存储。
     * <p> 示例值：true
     */
    @SerializedName("is_all_day")
    private Boolean isAllDay;

    // builder 开始
    public Due() {
    }

    public Due(Builder builder) {
        /**
         * 截止时间/日期的时间戳，距1970-01-01 00:00:00的毫秒数。如果截止时间是一个日期，需要把日期转换成时间戳，并设置 is_all_day=true
         * <p> 示例值：1675454764000
         */
        this.timestamp = builder.timestamp;
        /**
         * 是否截止到一个日期。如果设为true，timestamp中只有日期的部分会被解析和存储。
         * <p> 示例值：true
         */
        this.isAllDay = builder.isAllDay;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getTimestamp() {
        return this.timestamp;
    }

    public void setTimestamp(String timestamp) {
        this.timestamp = timestamp;
    }

    public Boolean getIsAllDay() {
        return this.isAllDay;
    }

    public void setIsAllDay(Boolean isAllDay) {
        this.isAllDay = isAllDay;
    }

    public static class Builder {
        /**
         * 截止时间/日期的时间戳，距1970-01-01 00:00:00的毫秒数。如果截止时间是一个日期，需要把日期转换成时间戳，并设置 is_all_day=true
         * <p> 示例值：1675454764000
         */
        private String timestamp;
        /**
         * 是否截止到一个日期。如果设为true，timestamp中只有日期的部分会被解析和存储。
         * <p> 示例值：true
         */
        private Boolean isAllDay;

        /**
         * 截止时间/日期的时间戳，距1970-01-01 00:00:00的毫秒数。如果截止时间是一个日期，需要把日期转换成时间戳，并设置 is_all_day=true
         * <p> 示例值：1675454764000
         *
         * @param timestamp
         * @return
         */
        public Builder timestamp(String timestamp) {
            this.timestamp = timestamp;
            return this;
        }


        /**
         * 是否截止到一个日期。如果设为true，timestamp中只有日期的部分会被解析和存储。
         * <p> 示例值：true
         *
         * @param isAllDay
         * @return
         */
        public Builder isAllDay(Boolean isAllDay) {
            this.isAllDay = isAllDay;
            return this;
        }


        public Due build() {
            return new Due(this);
        }
    }
}

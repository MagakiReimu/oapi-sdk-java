// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.im.v1.model;

import com.google.gson.annotations.SerializedName;

public class ImDepthData {
    /**
     * 分区日期
     * <p> 示例值：2022-02-02
     */
    @SerializedName("p_date")
    private String pDate;
    /**
     * 部门id
     * <p> 示例值：123456
     */
    @SerializedName("department_id")
    private String departmentId;
    /**
     * 部门路径
     * <p> 示例值：test/subtest
     */
    @SerializedName("department_path")
    private String departmentPath;
    /**
     * 发消息用户渗透率
     * <p> 示例值：0.50
     */
    @SerializedName("send_msg_rate")
    private Double sendMsgRate;
    /**
     * 人均发消息数量
     * <p> 示例值：50
     */
    @SerializedName("avg_send_msg_cnt")
    private Double avgSendMsgCnt;
    /**
     * 仅 PC 端的发消息用户渗透率
     * <p> 示例值：0.50
     */
    @SerializedName("pc_send_msg_rate")
    private Double pcSendMsgRate;
    /**
     * 仅 PC 端的人均发消息数量
     * <p> 示例值：50
     */
    @SerializedName("pc_avg_send_msg_cnt")
    private Double pcAvgSendMsgCnt;
    /**
     * 仅移动端的发消息用户渗透率
     * <p> 示例值：0.50
     */
    @SerializedName("mobile_send_msg_rate")
    private Double mobileSendMsgRate;
    /**
     * 仅移动端的人均发消息数量
     * <p> 示例值：50
     */
    @SerializedName("mobile_avg_send_msg_cnt")
    private Double mobileAvgSendMsgCnt;
    /**
     * 会议群发消息用户渗透率
     * <p> 示例值：0.50
     */
    @SerializedName("meeting_group_send_msg_rate")
    private Double meetingGroupSendMsgRate;
    /**
     * 全员群发消息用户渗透率
     * <p> 示例值：0.50
     */
    @SerializedName("tenant_group_send_msg_rate")
    private Double tenantGroupSendMsgRate;
    /**
     * 部门群发消息用户渗透率
     * <p> 示例值：0.50
     */
    @SerializedName("dept_group_send_msg_rate")
    private Double deptGroupSendMsgRate;
    /**
     * 话题群发消息用户渗透率
     * <p> 示例值：0.50
     */
    @SerializedName("topic_group_send_msg_rate")
    private Double topicGroupSendMsgRate;
    /**
     * 群聊中 @ 消息占比
     * <p> 示例值：0.50
     */
    @SerializedName("group_at_msg_rate")
    private Double groupAtMsgRate;
    /**
     * 群聊中回复消息占比
     * <p> 示例值：0.50
     */
    @SerializedName("group_reply_msg_rate")
    private Double groupReplyMsgRate;
    /**
     * 发送 reaction 用户渗透率
     * <p> 示例值：0.50
     */
    @SerializedName("reaction_rate")
    private Double reactionRate;
    /**
     * 发送单聊消息占比
     * <p> 示例值：0.50
     */
    @SerializedName("p2p_send_msg_rate")
    private Double p2pSendMsgRate;
    /**
     * 图片消息用户渗透率
     * <p> 示例值：0.50
     */
    @SerializedName("img_send_msg_rate")
    private Double imgSendMsgRate;
    /**
     * 文件消息用户渗透率
     * <p> 示例值：0.50
     */
    @SerializedName("file_send_msg_rate")
    private Double fileSendMsgRate;
    /**
     * 表情包消息用户渗透率
     * <p> 示例值：0.50
     */
    @SerializedName("sticker_send_msg_rate")
    private Double stickerSendMsgRate;
    /**
     * 富文本消息用户渗透率
     * <p> 示例值：0.50
     */
    @SerializedName("post_send_msg_rate")
    private Double postSendMsgRate;

    // builder 开始
    public ImDepthData() {
    }

    public ImDepthData(Builder builder) {
        /**
         * 分区日期
         * <p> 示例值：2022-02-02
         */
        this.pDate = builder.pDate;
        /**
         * 部门id
         * <p> 示例值：123456
         */
        this.departmentId = builder.departmentId;
        /**
         * 部门路径
         * <p> 示例值：test/subtest
         */
        this.departmentPath = builder.departmentPath;
        /**
         * 发消息用户渗透率
         * <p> 示例值：0.50
         */
        this.sendMsgRate = builder.sendMsgRate;
        /**
         * 人均发消息数量
         * <p> 示例值：50
         */
        this.avgSendMsgCnt = builder.avgSendMsgCnt;
        /**
         * 仅 PC 端的发消息用户渗透率
         * <p> 示例值：0.50
         */
        this.pcSendMsgRate = builder.pcSendMsgRate;
        /**
         * 仅 PC 端的人均发消息数量
         * <p> 示例值：50
         */
        this.pcAvgSendMsgCnt = builder.pcAvgSendMsgCnt;
        /**
         * 仅移动端的发消息用户渗透率
         * <p> 示例值：0.50
         */
        this.mobileSendMsgRate = builder.mobileSendMsgRate;
        /**
         * 仅移动端的人均发消息数量
         * <p> 示例值：50
         */
        this.mobileAvgSendMsgCnt = builder.mobileAvgSendMsgCnt;
        /**
         * 会议群发消息用户渗透率
         * <p> 示例值：0.50
         */
        this.meetingGroupSendMsgRate = builder.meetingGroupSendMsgRate;
        /**
         * 全员群发消息用户渗透率
         * <p> 示例值：0.50
         */
        this.tenantGroupSendMsgRate = builder.tenantGroupSendMsgRate;
        /**
         * 部门群发消息用户渗透率
         * <p> 示例值：0.50
         */
        this.deptGroupSendMsgRate = builder.deptGroupSendMsgRate;
        /**
         * 话题群发消息用户渗透率
         * <p> 示例值：0.50
         */
        this.topicGroupSendMsgRate = builder.topicGroupSendMsgRate;
        /**
         * 群聊中 @ 消息占比
         * <p> 示例值：0.50
         */
        this.groupAtMsgRate = builder.groupAtMsgRate;
        /**
         * 群聊中回复消息占比
         * <p> 示例值：0.50
         */
        this.groupReplyMsgRate = builder.groupReplyMsgRate;
        /**
         * 发送 reaction 用户渗透率
         * <p> 示例值：0.50
         */
        this.reactionRate = builder.reactionRate;
        /**
         * 发送单聊消息占比
         * <p> 示例值：0.50
         */
        this.p2pSendMsgRate = builder.p2pSendMsgRate;
        /**
         * 图片消息用户渗透率
         * <p> 示例值：0.50
         */
        this.imgSendMsgRate = builder.imgSendMsgRate;
        /**
         * 文件消息用户渗透率
         * <p> 示例值：0.50
         */
        this.fileSendMsgRate = builder.fileSendMsgRate;
        /**
         * 表情包消息用户渗透率
         * <p> 示例值：0.50
         */
        this.stickerSendMsgRate = builder.stickerSendMsgRate;
        /**
         * 富文本消息用户渗透率
         * <p> 示例值：0.50
         */
        this.postSendMsgRate = builder.postSendMsgRate;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getPDate() {
        return this.pDate;
    }

    public void setPDate(String pDate) {
        this.pDate = pDate;
    }

    public String getDepartmentId() {
        return this.departmentId;
    }

    public void setDepartmentId(String departmentId) {
        this.departmentId = departmentId;
    }

    public String getDepartmentPath() {
        return this.departmentPath;
    }

    public void setDepartmentPath(String departmentPath) {
        this.departmentPath = departmentPath;
    }

    public Double getSendMsgRate() {
        return this.sendMsgRate;
    }

    public void setSendMsgRate(Double sendMsgRate) {
        this.sendMsgRate = sendMsgRate;
    }

    public Double getAvgSendMsgCnt() {
        return this.avgSendMsgCnt;
    }

    public void setAvgSendMsgCnt(Double avgSendMsgCnt) {
        this.avgSendMsgCnt = avgSendMsgCnt;
    }

    public Double getPcSendMsgRate() {
        return this.pcSendMsgRate;
    }

    public void setPcSendMsgRate(Double pcSendMsgRate) {
        this.pcSendMsgRate = pcSendMsgRate;
    }

    public Double getPcAvgSendMsgCnt() {
        return this.pcAvgSendMsgCnt;
    }

    public void setPcAvgSendMsgCnt(Double pcAvgSendMsgCnt) {
        this.pcAvgSendMsgCnt = pcAvgSendMsgCnt;
    }

    public Double getMobileSendMsgRate() {
        return this.mobileSendMsgRate;
    }

    public void setMobileSendMsgRate(Double mobileSendMsgRate) {
        this.mobileSendMsgRate = mobileSendMsgRate;
    }

    public Double getMobileAvgSendMsgCnt() {
        return this.mobileAvgSendMsgCnt;
    }

    public void setMobileAvgSendMsgCnt(Double mobileAvgSendMsgCnt) {
        this.mobileAvgSendMsgCnt = mobileAvgSendMsgCnt;
    }

    public Double getMeetingGroupSendMsgRate() {
        return this.meetingGroupSendMsgRate;
    }

    public void setMeetingGroupSendMsgRate(Double meetingGroupSendMsgRate) {
        this.meetingGroupSendMsgRate = meetingGroupSendMsgRate;
    }

    public Double getTenantGroupSendMsgRate() {
        return this.tenantGroupSendMsgRate;
    }

    public void setTenantGroupSendMsgRate(Double tenantGroupSendMsgRate) {
        this.tenantGroupSendMsgRate = tenantGroupSendMsgRate;
    }

    public Double getDeptGroupSendMsgRate() {
        return this.deptGroupSendMsgRate;
    }

    public void setDeptGroupSendMsgRate(Double deptGroupSendMsgRate) {
        this.deptGroupSendMsgRate = deptGroupSendMsgRate;
    }

    public Double getTopicGroupSendMsgRate() {
        return this.topicGroupSendMsgRate;
    }

    public void setTopicGroupSendMsgRate(Double topicGroupSendMsgRate) {
        this.topicGroupSendMsgRate = topicGroupSendMsgRate;
    }

    public Double getGroupAtMsgRate() {
        return this.groupAtMsgRate;
    }

    public void setGroupAtMsgRate(Double groupAtMsgRate) {
        this.groupAtMsgRate = groupAtMsgRate;
    }

    public Double getGroupReplyMsgRate() {
        return this.groupReplyMsgRate;
    }

    public void setGroupReplyMsgRate(Double groupReplyMsgRate) {
        this.groupReplyMsgRate = groupReplyMsgRate;
    }

    public Double getReactionRate() {
        return this.reactionRate;
    }

    public void setReactionRate(Double reactionRate) {
        this.reactionRate = reactionRate;
    }

    public Double getP2pSendMsgRate() {
        return this.p2pSendMsgRate;
    }

    public void setP2pSendMsgRate(Double p2pSendMsgRate) {
        this.p2pSendMsgRate = p2pSendMsgRate;
    }

    public Double getImgSendMsgRate() {
        return this.imgSendMsgRate;
    }

    public void setImgSendMsgRate(Double imgSendMsgRate) {
        this.imgSendMsgRate = imgSendMsgRate;
    }

    public Double getFileSendMsgRate() {
        return this.fileSendMsgRate;
    }

    public void setFileSendMsgRate(Double fileSendMsgRate) {
        this.fileSendMsgRate = fileSendMsgRate;
    }

    public Double getStickerSendMsgRate() {
        return this.stickerSendMsgRate;
    }

    public void setStickerSendMsgRate(Double stickerSendMsgRate) {
        this.stickerSendMsgRate = stickerSendMsgRate;
    }

    public Double getPostSendMsgRate() {
        return this.postSendMsgRate;
    }

    public void setPostSendMsgRate(Double postSendMsgRate) {
        this.postSendMsgRate = postSendMsgRate;
    }

    public static class Builder {
        /**
         * 分区日期
         * <p> 示例值：2022-02-02
         */
        private String pDate;
        /**
         * 部门id
         * <p> 示例值：123456
         */
        private String departmentId;
        /**
         * 部门路径
         * <p> 示例值：test/subtest
         */
        private String departmentPath;
        /**
         * 发消息用户渗透率
         * <p> 示例值：0.50
         */
        private Double sendMsgRate;
        /**
         * 人均发消息数量
         * <p> 示例值：50
         */
        private Double avgSendMsgCnt;
        /**
         * 仅 PC 端的发消息用户渗透率
         * <p> 示例值：0.50
         */
        private Double pcSendMsgRate;
        /**
         * 仅 PC 端的人均发消息数量
         * <p> 示例值：50
         */
        private Double pcAvgSendMsgCnt;
        /**
         * 仅移动端的发消息用户渗透率
         * <p> 示例值：0.50
         */
        private Double mobileSendMsgRate;
        /**
         * 仅移动端的人均发消息数量
         * <p> 示例值：50
         */
        private Double mobileAvgSendMsgCnt;
        /**
         * 会议群发消息用户渗透率
         * <p> 示例值：0.50
         */
        private Double meetingGroupSendMsgRate;
        /**
         * 全员群发消息用户渗透率
         * <p> 示例值：0.50
         */
        private Double tenantGroupSendMsgRate;
        /**
         * 部门群发消息用户渗透率
         * <p> 示例值：0.50
         */
        private Double deptGroupSendMsgRate;
        /**
         * 话题群发消息用户渗透率
         * <p> 示例值：0.50
         */
        private Double topicGroupSendMsgRate;
        /**
         * 群聊中 @ 消息占比
         * <p> 示例值：0.50
         */
        private Double groupAtMsgRate;
        /**
         * 群聊中回复消息占比
         * <p> 示例值：0.50
         */
        private Double groupReplyMsgRate;
        /**
         * 发送 reaction 用户渗透率
         * <p> 示例值：0.50
         */
        private Double reactionRate;
        /**
         * 发送单聊消息占比
         * <p> 示例值：0.50
         */
        private Double p2pSendMsgRate;
        /**
         * 图片消息用户渗透率
         * <p> 示例值：0.50
         */
        private Double imgSendMsgRate;
        /**
         * 文件消息用户渗透率
         * <p> 示例值：0.50
         */
        private Double fileSendMsgRate;
        /**
         * 表情包消息用户渗透率
         * <p> 示例值：0.50
         */
        private Double stickerSendMsgRate;
        /**
         * 富文本消息用户渗透率
         * <p> 示例值：0.50
         */
        private Double postSendMsgRate;

        /**
         * 分区日期
         * <p> 示例值：2022-02-02
         *
         * @param pDate
         * @return
         */
        public Builder pDate(String pDate) {
            this.pDate = pDate;
            return this;
        }


        /**
         * 部门id
         * <p> 示例值：123456
         *
         * @param departmentId
         * @return
         */
        public Builder departmentId(String departmentId) {
            this.departmentId = departmentId;
            return this;
        }


        /**
         * 部门路径
         * <p> 示例值：test/subtest
         *
         * @param departmentPath
         * @return
         */
        public Builder departmentPath(String departmentPath) {
            this.departmentPath = departmentPath;
            return this;
        }


        /**
         * 发消息用户渗透率
         * <p> 示例值：0.50
         *
         * @param sendMsgRate
         * @return
         */
        public Builder sendMsgRate(Double sendMsgRate) {
            this.sendMsgRate = sendMsgRate;
            return this;
        }


        /**
         * 人均发消息数量
         * <p> 示例值：50
         *
         * @param avgSendMsgCnt
         * @return
         */
        public Builder avgSendMsgCnt(Double avgSendMsgCnt) {
            this.avgSendMsgCnt = avgSendMsgCnt;
            return this;
        }


        /**
         * 仅 PC 端的发消息用户渗透率
         * <p> 示例值：0.50
         *
         * @param pcSendMsgRate
         * @return
         */
        public Builder pcSendMsgRate(Double pcSendMsgRate) {
            this.pcSendMsgRate = pcSendMsgRate;
            return this;
        }


        /**
         * 仅 PC 端的人均发消息数量
         * <p> 示例值：50
         *
         * @param pcAvgSendMsgCnt
         * @return
         */
        public Builder pcAvgSendMsgCnt(Double pcAvgSendMsgCnt) {
            this.pcAvgSendMsgCnt = pcAvgSendMsgCnt;
            return this;
        }


        /**
         * 仅移动端的发消息用户渗透率
         * <p> 示例值：0.50
         *
         * @param mobileSendMsgRate
         * @return
         */
        public Builder mobileSendMsgRate(Double mobileSendMsgRate) {
            this.mobileSendMsgRate = mobileSendMsgRate;
            return this;
        }


        /**
         * 仅移动端的人均发消息数量
         * <p> 示例值：50
         *
         * @param mobileAvgSendMsgCnt
         * @return
         */
        public Builder mobileAvgSendMsgCnt(Double mobileAvgSendMsgCnt) {
            this.mobileAvgSendMsgCnt = mobileAvgSendMsgCnt;
            return this;
        }


        /**
         * 会议群发消息用户渗透率
         * <p> 示例值：0.50
         *
         * @param meetingGroupSendMsgRate
         * @return
         */
        public Builder meetingGroupSendMsgRate(Double meetingGroupSendMsgRate) {
            this.meetingGroupSendMsgRate = meetingGroupSendMsgRate;
            return this;
        }


        /**
         * 全员群发消息用户渗透率
         * <p> 示例值：0.50
         *
         * @param tenantGroupSendMsgRate
         * @return
         */
        public Builder tenantGroupSendMsgRate(Double tenantGroupSendMsgRate) {
            this.tenantGroupSendMsgRate = tenantGroupSendMsgRate;
            return this;
        }


        /**
         * 部门群发消息用户渗透率
         * <p> 示例值：0.50
         *
         * @param deptGroupSendMsgRate
         * @return
         */
        public Builder deptGroupSendMsgRate(Double deptGroupSendMsgRate) {
            this.deptGroupSendMsgRate = deptGroupSendMsgRate;
            return this;
        }


        /**
         * 话题群发消息用户渗透率
         * <p> 示例值：0.50
         *
         * @param topicGroupSendMsgRate
         * @return
         */
        public Builder topicGroupSendMsgRate(Double topicGroupSendMsgRate) {
            this.topicGroupSendMsgRate = topicGroupSendMsgRate;
            return this;
        }


        /**
         * 群聊中 @ 消息占比
         * <p> 示例值：0.50
         *
         * @param groupAtMsgRate
         * @return
         */
        public Builder groupAtMsgRate(Double groupAtMsgRate) {
            this.groupAtMsgRate = groupAtMsgRate;
            return this;
        }


        /**
         * 群聊中回复消息占比
         * <p> 示例值：0.50
         *
         * @param groupReplyMsgRate
         * @return
         */
        public Builder groupReplyMsgRate(Double groupReplyMsgRate) {
            this.groupReplyMsgRate = groupReplyMsgRate;
            return this;
        }


        /**
         * 发送 reaction 用户渗透率
         * <p> 示例值：0.50
         *
         * @param reactionRate
         * @return
         */
        public Builder reactionRate(Double reactionRate) {
            this.reactionRate = reactionRate;
            return this;
        }


        /**
         * 发送单聊消息占比
         * <p> 示例值：0.50
         *
         * @param p2pSendMsgRate
         * @return
         */
        public Builder p2pSendMsgRate(Double p2pSendMsgRate) {
            this.p2pSendMsgRate = p2pSendMsgRate;
            return this;
        }


        /**
         * 图片消息用户渗透率
         * <p> 示例值：0.50
         *
         * @param imgSendMsgRate
         * @return
         */
        public Builder imgSendMsgRate(Double imgSendMsgRate) {
            this.imgSendMsgRate = imgSendMsgRate;
            return this;
        }


        /**
         * 文件消息用户渗透率
         * <p> 示例值：0.50
         *
         * @param fileSendMsgRate
         * @return
         */
        public Builder fileSendMsgRate(Double fileSendMsgRate) {
            this.fileSendMsgRate = fileSendMsgRate;
            return this;
        }


        /**
         * 表情包消息用户渗透率
         * <p> 示例值：0.50
         *
         * @param stickerSendMsgRate
         * @return
         */
        public Builder stickerSendMsgRate(Double stickerSendMsgRate) {
            this.stickerSendMsgRate = stickerSendMsgRate;
            return this;
        }


        /**
         * 富文本消息用户渗透率
         * <p> 示例值：0.50
         *
         * @param postSendMsgRate
         * @return
         */
        public Builder postSendMsgRate(Double postSendMsgRate) {
            this.postSendMsgRate = postSendMsgRate;
            return this;
        }


        public ImDepthData build() {
            return new ImDepthData(this);
        }
    }
}

// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.security_and_compliance.v1.model;

import com.lark.oapi.core.response.EmptyData;
import com.lark.oapi.service.security_and_compliance.v1.enums.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.SerializedName;
import com.lark.oapi.core.annotation.Body;
import com.lark.oapi.core.annotation.Path;
import com.lark.oapi.core.annotation.Query;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import com.lark.oapi.core.utils.Strings;
import com.lark.oapi.core.response.BaseResponse;

public class DlpDetectModeProofContext {
    /**
     * 检测类型
     * <p> 示例值：1
     */
    @SerializedName("detect_mode")
    private Integer detectMode;
    /**
     * 检测类型名称
     * <p> 示例值：关键词1
     */
    @SerializedName("detect_name")
    private String detectName;
    /**
     * 命中片段
     * <p> 示例值：
     */
    @SerializedName("proof_contexts")
    private DlpProofContext[] proofContexts;
    /**
     * 命中次数
     * <p> 示例值：12
     */
    @SerializedName("hit_count")
    private Integer hitCount;

    // builder 开始
    public DlpDetectModeProofContext() {
    }

    public DlpDetectModeProofContext(Builder builder) {
        /**
         * 检测类型
         * <p> 示例值：1
         */
        this.detectMode = builder.detectMode;
        /**
         * 检测类型名称
         * <p> 示例值：关键词1
         */
        this.detectName = builder.detectName;
        /**
         * 命中片段
         * <p> 示例值：
         */
        this.proofContexts = builder.proofContexts;
        /**
         * 命中次数
         * <p> 示例值：12
         */
        this.hitCount = builder.hitCount;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public Integer getDetectMode() {
        return this.detectMode;
    }

    public void setDetectMode(Integer detectMode) {
        this.detectMode = detectMode;
    }

    public String getDetectName() {
        return this.detectName;
    }

    public void setDetectName(String detectName) {
        this.detectName = detectName;
    }

    public DlpProofContext[] getProofContexts() {
        return this.proofContexts;
    }

    public void setProofContexts(DlpProofContext[] proofContexts) {
        this.proofContexts = proofContexts;
    }

    public Integer getHitCount() {
        return this.hitCount;
    }

    public void setHitCount(Integer hitCount) {
        this.hitCount = hitCount;
    }

    public static class Builder {
        /**
         * 检测类型
         * <p> 示例值：1
         */
        private Integer detectMode;
        /**
         * 检测类型名称
         * <p> 示例值：关键词1
         */
        private String detectName;
        /**
         * 命中片段
         * <p> 示例值：
         */
        private DlpProofContext[] proofContexts;
        /**
         * 命中次数
         * <p> 示例值：12
         */
        private Integer hitCount;

        /**
         * 检测类型
         * <p> 示例值：1
         *
         * @param detectMode
         * @return
         */
        public Builder detectMode(Integer detectMode) {
            this.detectMode = detectMode;
            return this;
        }


        /**
         * 检测类型名称
         * <p> 示例值：关键词1
         *
         * @param detectName
         * @return
         */
        public Builder detectName(String detectName) {
            this.detectName = detectName;
            return this;
        }


        /**
         * 命中片段
         * <p> 示例值：
         *
         * @param proofContexts
         * @return
         */
        public Builder proofContexts(DlpProofContext[] proofContexts) {
            this.proofContexts = proofContexts;
            return this;
        }


        /**
         * 命中次数
         * <p> 示例值：12
         *
         * @param hitCount
         * @return
         */
        public Builder hitCount(Integer hitCount) {
            this.hitCount = hitCount;
            return this;
        }


        public DlpDetectModeProofContext build() {
            return new DlpDetectModeProofContext(this);
        }
    }
}

// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.im.v1.model;

import com.google.gson.annotations.SerializedName;

public class UnreadSpecialFocusReqBody {
    /**
     * 特别关注ID列表。请根据 ==member_id_type== 参数填入`open_id`、`user_id`、`union_id`或`app_id`类型的ID
     * <p> 示例值：["ou_e167f0c694cb1c77bb040857dd963024","ou_a18fe85d22e7633852d8104226e99eac"]
     */
    @SerializedName("id_list")
    private String[] idList;
    /**
     * 按群模式过滤特别关注;;**注意**：;- 当指定 ==chat_mode== 为 ==p2p==时，将返回用户与被特别关注者之间单聊的未读消息数。;- 当指定==chat_mode== 为==group==时，将返回被用户特别关注者在群聊中At用户且用户未读的消息数。
     * <p> 示例值：group
     */
    @SerializedName("chat_mode")
    private String chatMode;

    // builder 开始
    public UnreadSpecialFocusReqBody() {
    }

    public UnreadSpecialFocusReqBody(Builder builder) {
        /**
         * 特别关注ID列表。请根据 ==member_id_type== 参数填入`open_id`、`user_id`、`union_id`或`app_id`类型的ID
         * <p> 示例值：["ou_e167f0c694cb1c77bb040857dd963024","ou_a18fe85d22e7633852d8104226e99eac"]
         */
        this.idList = builder.idList;
        /**
         * 按群模式过滤特别关注;;**注意**：;- 当指定 ==chat_mode== 为 ==p2p==时，将返回用户与被特别关注者之间单聊的未读消息数。;- 当指定==chat_mode== 为==group==时，将返回被用户特别关注者在群聊中At用户且用户未读的消息数。
         * <p> 示例值：group
         */
        this.chatMode = builder.chatMode;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String[] getIdList() {
        return this.idList;
    }

    public void setIdList(String[] idList) {
        this.idList = idList;
    }

    public String getChatMode() {
        return this.chatMode;
    }

    public void setChatMode(String chatMode) {
        this.chatMode = chatMode;
    }

    public static class Builder {
        /**
         * 特别关注ID列表。请根据 ==member_id_type== 参数填入`open_id`、`user_id`、`union_id`或`app_id`类型的ID
         * <p> 示例值：["ou_e167f0c694cb1c77bb040857dd963024","ou_a18fe85d22e7633852d8104226e99eac"]
         */
        private String[] idList;
        /**
         * 按群模式过滤特别关注;;**注意**：;- 当指定 ==chat_mode== 为 ==p2p==时，将返回用户与被特别关注者之间单聊的未读消息数。;- 当指定==chat_mode== 为==group==时，将返回被用户特别关注者在群聊中At用户且用户未读的消息数。
         * <p> 示例值：group
         */
        private String chatMode;

        /**
         * 特别关注ID列表。请根据 ==member_id_type== 参数填入`open_id`、`user_id`、`union_id`或`app_id`类型的ID
         * <p> 示例值：["ou_e167f0c694cb1c77bb040857dd963024","ou_a18fe85d22e7633852d8104226e99eac"]
         *
         * @param idList
         * @return
         */
        public Builder idList(String[] idList) {
            this.idList = idList;
            return this;
        }


        /**
         * 按群模式过滤特别关注;;**注意**：;- 当指定 ==chat_mode== 为 ==p2p==时，将返回用户与被特别关注者之间单聊的未读消息数。;- 当指定==chat_mode== 为==group==时，将返回被用户特别关注者在群聊中At用户且用户未读的消息数。
         * <p> 示例值：group
         *
         * @param chatMode
         * @return
         */
        public Builder chatMode(String chatMode) {
            this.chatMode = chatMode;
            return this;
        }

        /**
         * 按群模式过滤特别关注;;**注意**：;- 当指定 ==chat_mode== 为 ==p2p==时，将返回用户与被特别关注者之间单聊的未读消息数。;- 当指定==chat_mode== 为==group==时，将返回被用户特别关注者在群聊中At用户且用户未读的消息数。
         * <p> 示例值：group
         *
         * @param chatMode {@link com.lark.oapi.service.im.v1.enums.UnreadSpecialFocusChatModeEnum}
         * @return
         */
        public Builder chatMode(com.lark.oapi.service.im.v1.enums.UnreadSpecialFocusChatModeEnum chatMode) {
            this.chatMode = chatMode.getValue();
            return this;
        }


        public UnreadSpecialFocusReqBody build() {
            return new UnreadSpecialFocusReqBody(this);
        }
    }
}

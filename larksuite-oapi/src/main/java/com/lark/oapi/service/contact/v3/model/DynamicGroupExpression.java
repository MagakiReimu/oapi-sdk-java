// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.contact.v3.model;

import com.google.gson.annotations.SerializedName;

public class DynamicGroupExpression {
    /**
     * 动态用户组表达式的左值，属性名称
     * <p> 示例值：user.name
     */
    @SerializedName("field")
    private String field;
    /**
     * 操作符，表示左值进行什么操作
     * <p> 示例值：-eq
     */
    @SerializedName("operator")
    private String operator;
    /**
     * 值，单个结果，用于单值运算，比如：等于操作
     * <p> 示例值：value
     */
    @SerializedName("value")
    private String value;
    /**
     * 值，多个结果，用于多值操作，比如属于
     * <p> 示例值：
     */
    @SerializedName("values")
    private String[] values;

    // builder 开始
    public DynamicGroupExpression() {
    }

    public DynamicGroupExpression(Builder builder) {
        /**
         * 动态用户组表达式的左值，属性名称
         * <p> 示例值：user.name
         */
        this.field = builder.field;
        /**
         * 操作符，表示左值进行什么操作
         * <p> 示例值：-eq
         */
        this.operator = builder.operator;
        /**
         * 值，单个结果，用于单值运算，比如：等于操作
         * <p> 示例值：value
         */
        this.value = builder.value;
        /**
         * 值，多个结果，用于多值操作，比如属于
         * <p> 示例值：
         */
        this.values = builder.values;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getField() {
        return this.field;
    }

    public void setField(String field) {
        this.field = field;
    }

    public String getOperator() {
        return this.operator;
    }

    public void setOperator(String operator) {
        this.operator = operator;
    }

    public String getValue() {
        return this.value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    public String[] getValues() {
        return this.values;
    }

    public void setValues(String[] values) {
        this.values = values;
    }

    public static class Builder {
        /**
         * 动态用户组表达式的左值，属性名称
         * <p> 示例值：user.name
         */
        private String field;
        /**
         * 操作符，表示左值进行什么操作
         * <p> 示例值：-eq
         */
        private String operator;
        /**
         * 值，单个结果，用于单值运算，比如：等于操作
         * <p> 示例值：value
         */
        private String value;
        /**
         * 值，多个结果，用于多值操作，比如属于
         * <p> 示例值：
         */
        private String[] values;

        /**
         * 动态用户组表达式的左值，属性名称
         * <p> 示例值：user.name
         *
         * @param field
         * @return
         */
        public Builder field(String field) {
            this.field = field;
            return this;
        }


        /**
         * 操作符，表示左值进行什么操作
         * <p> 示例值：-eq
         *
         * @param operator
         * @return
         */
        public Builder operator(String operator) {
            this.operator = operator;
            return this;
        }


        /**
         * 值，单个结果，用于单值运算，比如：等于操作
         * <p> 示例值：value
         *
         * @param value
         * @return
         */
        public Builder value(String value) {
            this.value = value;
            return this;
        }


        /**
         * 值，多个结果，用于多值操作，比如属于
         * <p> 示例值：
         *
         * @param values
         * @return
         */
        public Builder values(String[] values) {
            this.values = values;
            return this;
        }


        public DynamicGroupExpression build() {
            return new DynamicGroupExpression(this);
        }
    }
}

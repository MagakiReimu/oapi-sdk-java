// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.sheets.v3.model;

import com.google.gson.annotations.SerializedName;

public class SheetFilterInfo {
    /**
     * 筛选应用范围
     * <p> 示例值：xxxxxx!A1:H14
     */
    @SerializedName("range")
    private String range;
    /**
     * 筛选出来隐藏的行
     * <p> 示例值：
     */
    @SerializedName("filtered_out_rows")
    private Integer[] filteredOutRows;
    /**
     * sheet的筛选条件
     * <p> 示例值：
     */
    @SerializedName("filter_infos")
    private FilterInfo[] filterInfos;

    // builder 开始
    public SheetFilterInfo() {
    }

    public SheetFilterInfo(Builder builder) {
        /**
         * 筛选应用范围
         * <p> 示例值：xxxxxx!A1:H14
         */
        this.range = builder.range;
        /**
         * 筛选出来隐藏的行
         * <p> 示例值：
         */
        this.filteredOutRows = builder.filteredOutRows;
        /**
         * sheet的筛选条件
         * <p> 示例值：
         */
        this.filterInfos = builder.filterInfos;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String getRange() {
        return this.range;
    }

    public void setRange(String range) {
        this.range = range;
    }

    public Integer[] getFilteredOutRows() {
        return this.filteredOutRows;
    }

    public void setFilteredOutRows(Integer[] filteredOutRows) {
        this.filteredOutRows = filteredOutRows;
    }

    public FilterInfo[] getFilterInfos() {
        return this.filterInfos;
    }

    public void setFilterInfos(FilterInfo[] filterInfos) {
        this.filterInfos = filterInfos;
    }

    public static class Builder {
        /**
         * 筛选应用范围
         * <p> 示例值：xxxxxx!A1:H14
         */
        private String range;
        /**
         * 筛选出来隐藏的行
         * <p> 示例值：
         */
        private Integer[] filteredOutRows;
        /**
         * sheet的筛选条件
         * <p> 示例值：
         */
        private FilterInfo[] filterInfos;

        /**
         * 筛选应用范围
         * <p> 示例值：xxxxxx!A1:H14
         *
         * @param range
         * @return
         */
        public Builder range(String range) {
            this.range = range;
            return this;
        }


        /**
         * 筛选出来隐藏的行
         * <p> 示例值：
         *
         * @param filteredOutRows
         * @return
         */
        public Builder filteredOutRows(Integer[] filteredOutRows) {
            this.filteredOutRows = filteredOutRows;
            return this;
        }


        /**
         * sheet的筛选条件
         * <p> 示例值：
         *
         * @param filterInfos
         * @return
         */
        public Builder filterInfos(FilterInfo[] filterInfos) {
            this.filterInfos = filterInfos;
            return this;
        }


        public SheetFilterInfo build() {
            return new SheetFilterInfo(this);
        }
    }
}

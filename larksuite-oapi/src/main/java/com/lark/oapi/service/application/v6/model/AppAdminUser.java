// Code generated by lark suite oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package com.lark.oapi.service.application.v6.model;

import com.google.gson.annotations.SerializedName;

public class AppAdminUser {
    /**
     * 管理员类型列表，如果该管理员同时是超级管理员 又是管理员，则同时返回两个角色。 ""super_admin""：超级管理员 ""admin""：管理员 返回示例：[""super_admin"",""admin""]"
     * <p> 示例值：["admin","super_admin"]
     */
    @SerializedName("admin_type")
    private String[] adminType;
    /**
     * 反馈用户id，租户内用户的唯一标识 ，ID值与查询参数中的user_id_type对应
     * <p> 示例值：6865121785549946899
     */
    @SerializedName("user_id")
    private String userId;

    // builder 开始
    public AppAdminUser() {
    }

    public AppAdminUser(Builder builder) {
        /**
         * 管理员类型列表，如果该管理员同时是超级管理员 又是管理员，则同时返回两个角色。 ""super_admin""：超级管理员 ""admin""：管理员 返回示例：[""super_admin"",""admin""]"
         * <p> 示例值：["admin","super_admin"]
         */
        this.adminType = builder.adminType;
        /**
         * 反馈用户id，租户内用户的唯一标识 ，ID值与查询参数中的user_id_type对应
         * <p> 示例值：6865121785549946899
         */
        this.userId = builder.userId;
    }

    public static Builder newBuilder() {
        return new Builder();
    }

    public String[] getAdminType() {
        return this.adminType;
    }

    public void setAdminType(String[] adminType) {
        this.adminType = adminType;
    }

    public String getUserId() {
        return this.userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public static class Builder {
        /**
         * 管理员类型列表，如果该管理员同时是超级管理员 又是管理员，则同时返回两个角色。 ""super_admin""：超级管理员 ""admin""：管理员 返回示例：[""super_admin"",""admin""]"
         * <p> 示例值：["admin","super_admin"]
         */
        private String[] adminType;
        /**
         * 反馈用户id，租户内用户的唯一标识 ，ID值与查询参数中的user_id_type对应
         * <p> 示例值：6865121785549946899
         */
        private String userId;

        /**
         * 管理员类型列表，如果该管理员同时是超级管理员 又是管理员，则同时返回两个角色。 ""super_admin""：超级管理员 ""admin""：管理员 返回示例：[""super_admin"",""admin""]"
         * <p> 示例值：["admin","super_admin"]
         *
         * @param adminType
         * @return
         */
        public Builder adminType(String[] adminType) {
            this.adminType = adminType;
            return this;
        }


        /**
         * 反馈用户id，租户内用户的唯一标识 ，ID值与查询参数中的user_id_type对应
         * <p> 示例值：6865121785549946899
         *
         * @param userId
         * @return
         */
        public Builder userId(String userId) {
            this.userId = userId;
            return this;
        }


        public AppAdminUser build() {
            return new AppAdminUser(this);
        }
    }
}
